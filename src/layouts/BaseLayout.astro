---

import { site, getSocialLinks } from '../config/content';
import '../styles/globals.css';

const hexToRgb = (value: string): string => {
  if (!value) {
    return '0 0 0';
  }

  const normalized = value.replace('#', '').trim();
  if (normalized.length === 3) {
    const r = normalized[0];
    const g = normalized[1];
    const b = normalized[2];
    return `${parseInt(r + r, 16)} ${parseInt(g + g, 16)} ${parseInt(b + b, 16)}`;
  }

  if (normalized.length !== 6) {
    return '0 0 0';
  }

  const bigint = Number.parseInt(normalized, 16);
  const r = (bigint >> 16) & 255;
  const g = (bigint >> 8) & 255;
  const b = bigint & 255;

  return `${r} ${g} ${b}`;
};

const { title, description, showTagline, heroIsFullscreen = false } = Astro.props as {
  title?: string;
  description?: string;
  showTagline?: boolean;
  heroIsFullscreen?: boolean;
};
const headerSettings = site.header ?? {};
const footerSettings = site.footer ?? {};
const showLogoSetting = headerSettings.showLogo !== false;
const showBusinessNameSetting = headerSettings.showBusinessName !== false;
const showFooterLogoSetting = footerSettings.showLogo !== false;
const showFooterBusinessNameSetting = footerSettings.showBusinessName !== false;
const headerLogoHeightClass = showBusinessNameSetting ? 'h-[5.25rem]' : 'h-24';
const footerLogoHeightClass = showFooterBusinessNameSetting ? 'h-[5.25rem]' : 'h-24';
const normalizePath = (value: string | undefined) => {
  if (!value) return '/';
  const trimmed = value.trim();
  if (!trimmed || trimmed === '/') return '/';
  return trimmed.replace(/\/+$/, '') || '/';
};
const currentPath = normalizePath(Astro.url?.pathname);
const navItems = [
  { href: '/', label: 'Home' },
  { href: '/about', label: 'About' },
  { href: '/services', label: 'Services' },
  { href: '/contact', label: 'Contact' },
];
const pageTitle = title ? `${title} | ${site.name}` : site.name;
const metaDescription = description ?? site.tagline;
const primaryColor = site.colors?.primary ?? '#2563eb';
const secondaryColor = site.colors?.secondary ?? '#0f172a';
const accentColor = site.colors?.accent ?? '#f59e0b';
const rawBrandLogo = typeof site.brand?.logo === 'string' ? site.brand.logo.trim() : '';
const brandLogo = rawBrandLogo.length > 0 ? rawBrandLogo : null;
const brandLogoAlt =
  typeof site.brand?.logoAlt === 'string' && site.brand.logoAlt?.trim()?.length
    ? site.brand.logoAlt.trim()
    : site.name ?? 'Brand logo';
const headerHasLogo = showLogoSetting && Boolean(brandLogo);
const footerHasLogo = showFooterLogoSetting && Boolean(brandLogo);
const effectiveHeaderShowName = showBusinessNameSetting || !headerHasLogo;
const effectiveFooterShowName = showFooterBusinessNameSetting || !footerHasLogo;
const headerNameClasses = headerHasLogo
  ? 'text-lg font-semibold leading-tight text-slate-900 group-hover:text-inherit'
  : 'text-[1.6rem] font-semibold text-slate-900 transition hover:text-brand-primary';
const brandLinkClasses = headerHasLogo
  ? 'group inline-flex items-center gap-3 font-semibold text-slate-900 transition hover:text-brand-primary'
  : 'text-[1.6rem] font-semibold text-slate-900 transition hover:text-brand-primary';
const brandLinkLabel = site.name ?? 'Home';
const footerCredit = site.footerCredit;
const preloadImages = ['/images/home-hero.jpg', '/images/about-hero.jpg'];
const primaryRgb = hexToRgb(primaryColor);
const secondaryRgb = hexToRgb(secondaryColor);
const accentRgb = hexToRgb(accentColor);
const surfaceBaseRgb = '248 250 252';
const surfaceCardRgb = '255 255 255';
const surfaceMutedRgb = '241 245 249';
const showTaglineSetting = showTagline ?? true;
const shouldRenderTagline = !heroIsFullscreen && Boolean(showTaglineSetting && site.tagline?.trim());
const preloaderConfig = site.preloader ?? {};
const isPreloaderEnabled = preloaderConfig.enabled === true;
const preloaderBackgroundColor =
  typeof preloaderConfig.backgroundColor === 'string'
    ? preloaderConfig.backgroundColor.trim() || null
    : null;
const preloaderLogo =
  typeof preloaderConfig.logo === 'string' ? preloaderConfig.logo.trim() || null : null;
const rawPreloaderDuration = Number(preloaderConfig.minimumDurationMs ?? 2000);
const preloaderMinimumDuration = Number.isFinite(rawPreloaderDuration)
  ? Math.max(0, rawPreloaderDuration)
  : 2000;
const shouldRenderPreloader = isPreloaderEnabled;
const preloaderScript = `(() => {
  const preloader = document.getElementById('site-preloader');
  if (!preloader) return;
  const storageKey = 'site-preloader:shown';
  const hasShown = window.sessionStorage.getItem(storageKey) === 'true';

  if (hasShown) {
    preloader.remove();
    return;
  }

  const minimumDuration = ${preloaderMinimumDuration};
  const start = performance.now();
  let hideTriggered = false;
  const triggerHide = () => {
    if (hideTriggered) return;
    hideTriggered = true;
    const elapsed = performance.now() - start;
    const delay = Math.max(minimumDuration - elapsed, 0);
    window.setTimeout(() => {
      preloader.classList.add('is-site-preloader-hidden');
      preloader.addEventListener('transitionend', () => {
        preloader.remove();
        window.sessionStorage.setItem(storageKey, 'true');
      }, { once: true });
    }, delay);
  };
  if (document.readyState === 'complete') {
    triggerHide();
  } else {
    window.addEventListener('load', triggerHide, { once: true });
  }
  window.setTimeout(triggerHide, minimumDuration + 4000);
})();`;
const bodyStyle = `
  font-family: 'Inter', system-ui, -apple-system, BlinkMacSystemFont, "Segoe UI", sans-serif;
  --color-primary: ${primaryColor};
  --color-secondary: ${secondaryColor};
  --color-accent: ${accentColor};
  --color-primary-rgb: ${primaryRgb};
  --color-secondary-rgb: ${secondaryRgb};
  --color-accent-rgb: ${accentRgb};
  --surface-base-rgb: ${surfaceBaseRgb};
  --surface-card-rgb: ${surfaceCardRgb};
  --surface-muted-rgb: ${surfaceMutedRgb};
`;
const headerClasses =
  'site-header sticky top-0 left-0 right-0 z-40 w-full bg-white/90 backdrop-blur supports-[backdrop-filter]:bg-white/80 border-b border-slate-200/80 shadow-sm';
const mainClassList = {
  'flex-1': true,
  'pb-16': true,
  'pt-0': heroIsFullscreen,
  'pt-6': !heroIsFullscreen && shouldRenderTagline,
  'pt-12': !heroIsFullscreen && !shouldRenderTagline,
};
---
<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="utf-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1" />
    <title>{pageTitle}</title>
    <meta name="description" content={metaDescription} />
    <link rel="preconnect" href="https://fonts.googleapis.com" />
    <link rel="preconnect" href="https://fonts.gstatic.com" crossorigin />
    <link
      href="https://fonts.googleapis.com/css2?family=Inter:wght@400;500;600;700&display=swap"
      rel="stylesheet"
    />
    {preloadImages.map((href) => (
      <link rel="preload" as="image" href={href} />
    ))}
  </head>
  <body class="bg-slate-50 text-slate-900 antialiased" style={bodyStyle}>
    {shouldRenderPreloader && (
      <div
        id="site-preloader"
        class="site-preloader"
        style={preloaderBackgroundColor ? `--preloader-background: ${preloaderBackgroundColor};` : undefined}
        aria-hidden="true"
      >
        {preloaderLogo && (
          <img
            src={preloaderLogo}
            alt=""
            class="site-preloader__logo"
            loading="eager"
            decoding="async"
          />
        )}
      </div>
    )}
    {shouldRenderPreloader && <script is:inline set:html={preloaderScript}></script>}
    <a href="#main" class="sr-only focus:not-sr-only focus:absolute focus:top-4 focus:left-4 focus:z-50 focus:rounded focus:bg-white focus:px-4 focus:py-2 focus:text-sm focus:font-medium focus:text-slate-900">
      Skip to content
    </a>
    <header class={headerClasses} style="--header-height: 5rem;">
      <div class="mx-auto flex h-20 w-full max-w-6xl items-center justify-between border-b border-slate-200/80 px-6">
        <a href="/" class={brandLinkClasses}>
          {headerHasLogo ? (
            <img
              src={brandLogo ?? ''}
              alt={brandLinkLabel}
              class={`rounded-sm ${headerLogoHeightClass} w-auto transition`}
              loading="lazy"
              decoding="async"
            />
          ) : null}
          {effectiveHeaderShowName && (
            <span class={headerNameClasses}>
              {brandLinkLabel}
            </span>
          )}
        </a>
        <nav class="flex items-center gap-2 text-sm font-medium text-slate-600">
          {navItems.map(({ href, label }) => {
            const normalizedHref = normalizePath(href);
            const isActive = normalizedHref === currentPath;
            const baseClasses =
              'rounded-full px-4 py-2 transition-colors hover:bg-slate-100 hover:text-brand-primary';
            const activeClasses = isActive ? 'bg-slate-900 text-white shadow-sm' : '';

            return (
              <a
                href={href}
                class={`${baseClasses} ${activeClasses}`.trim()}
                aria-current={isActive ? 'page' : undefined}
              >
                {label}
              </a>
            );
          })}
        </nav>
      </div>
    </header>
    <div class="mx-auto flex min-h-screen w-full max-w-6xl flex-col px-6">
      {shouldRenderTagline && (
        <p class="pt-6 text-sm font-medium uppercase tracking-[0.2em] text-slate-500">
          {site.tagline}
        </p>
      )}
      <main id="main" class:list={mainClassList}>
        <slot />
      </main>
      <footer class="border-t border-slate-200 py-8 text-sm text-slate-500">
        <div class="flex flex-col gap-6">
          <div class="flex flex-col gap-4 sm:flex-row sm:items-center sm:justify-between">
            {footerHasLogo && (
              <a
                href="/"
                class="inline-flex items-center gap-3 font-semibold text-slate-700 transition hover:text-brand-primary"
              >
                <img
                  src={brandLogo ?? ''}
                  alt={brandLogoAlt}
                  class={`rounded-sm ${footerLogoHeightClass} w-auto transition`}
                  loading="lazy"
                  decoding="async"
                />
                {effectiveFooterShowName && (
                  <span class="text-base font-semibold leading-tight">{brandLinkLabel}</span>
                )}
              </a>
            )}
            {!footerHasLogo && effectiveFooterShowName && (
              <span class="text-base font-semibold text-slate-700">{brandLinkLabel}</span>
            )}
            <div class="flex flex-wrap items-center gap-4">
              {getSocialLinks().map(([key, url]) => (
                <a
                  href={url}
                  class="capitalize transition-colors hover:text-brand-primary"
                >
                  {key}
                </a>
              ))}
              {footerCredit?.label && footerCredit?.href && (
                <span class="hidden h-4 w-px bg-slate-200 sm:inline" aria-hidden="true"></span>
              )}
              {footerCredit?.label && footerCredit?.href && (
                <a
                  href={footerCredit.href}
                  class="font-medium text-slate-600 transition-colors hover:text-brand-primary"
                  target="_blank"
                  rel="noreferrer"
                >
                  {footerCredit.label}
                </a>
              )}
            </div>
          </div>
          <p class="text-xs text-slate-500">&copy; {new Date().getFullYear()} {brandLinkLabel}. All rights reserved.</p>
        </div>
      </footer>
    </div>
  </body>
</html>
