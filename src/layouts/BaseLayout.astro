---
import type { DesignTypographyScale } from '../types/content';
import { site, getSocialLinks, getDesignTokens } from '../config/content';
import '../styles/globals.css';

const colorToRgb = (value?: string | null): string => {
  if (!value) {
    return '0 0 0';
  }

  const normalized = value.trim();
  if (!normalized) {
    return '0 0 0';
  }

  const rgbMatch = normalized.match(/^rgba?\(([^)]+)\)$/i);
  if (rgbMatch) {
    const components = rgbMatch[1]
      .split(',')
      .map((part) => part.trim())
      .filter(Boolean);

    if (components.length >= 3) {
      const [r, g, b] = components;
      const toNumber = (component: string): number => {
        const parsed = Number.parseFloat(component);
        return Number.isFinite(parsed) ? Math.max(0, Math.min(255, parsed)) : 0;
      };
      return `${toNumber(r)} ${toNumber(g)} ${toNumber(b)}`;
    }
  }

  const hexMatch = normalized.match(/^#?([a-f0-9]{3}|[a-f0-9]{6})$/i);
  if (!hexMatch) {
    return '0 0 0';
  }
  const hex = hexMatch[1];

  if (hex.length === 3) {
    const r = hex[0];
    const g = hex[1];
    const b = hex[2];
    return `${Number.parseInt(r + r, 16)} ${Number.parseInt(g + g, 16)} ${Number.parseInt(b + b, 16)}`;
  }

  const bigint = Number.parseInt(hex, 16);
  const r = (bigint >> 16) & 255;
  const g = (bigint >> 8) & 255;
  const b = bigint & 255;

  return `${r} ${g} ${b}`;
};

const toKebabCase = (value: string): string =>
  value
    .replace(/([a-z0-9])([A-Z])/g, '$1-$2')
    .replace(/[\s_]+/g, '-')
    .toLowerCase();

const buildTypographyVarBlock = (tokenKey: string, config?: DesignTypographyScale): string => {
  if (!config) {
    return '';
  }

  const lines: string[] = [];
  const slug = toKebabCase(tokenKey);

  if (config.size?.mobile) {
    lines.push(`  --font-${slug}-size-mobile: ${config.size.mobile};`);
  }
  if (config.size?.tablet) {
    lines.push(`  --font-${slug}-size-tablet: ${config.size.tablet};`);
  }
  if (config.size?.desktop) {
    lines.push(`  --font-${slug}-size-desktop: ${config.size.desktop};`);
  }
  if (typeof config.weight === 'number') {
    lines.push(`  --font-${slug}-weight: ${config.weight};`);
  }
  if (config.lineHeight) {
    lines.push(`  --font-${slug}-line-height: ${config.lineHeight};`);
  }
  if (config.letterSpacing) {
    lines.push(`  --font-${slug}-letter-spacing: ${config.letterSpacing};`);
  }
  if (config.uppercase != null) {
    lines.push(`  --font-${slug}-text-transform: ${config.uppercase ? 'uppercase' : 'none'};`);
  }

  return lines.join('\n');
};

const { title, description, showTagline, heroIsFullscreen = false } = Astro.props as {
  title?: string;
  description?: string;
  showTagline?: boolean;
  heroIsFullscreen?: boolean;
};
const headerSettings = site.header ?? {};
const footerSettings = site.footer ?? {};
const showLogoSetting = headerSettings.showLogo !== false;
const showBusinessNameSetting = headerSettings.showBusinessName !== false;
const showFooterLogoSetting = footerSettings.showLogo !== false;
const showFooterBusinessNameSetting = footerSettings.showBusinessName !== false;
const headerLogoHeightClass = showBusinessNameSetting ? 'h-[5.25rem]' : 'h-24';
const footerLogoHeightClass = showFooterBusinessNameSetting ? 'h-[5.25rem]' : 'h-24';
const normalizePath = (value: string | undefined) => {
  if (!value) return '/';
  const trimmed = value.trim();
  if (!trimmed || trimmed === '/') return '/';
  return trimmed.replace(/\/+$/, '') || '/';
};
const currentPath = normalizePath(Astro.url?.pathname);
const navItems = [
  { href: '/', label: 'Home' },
  { href: '/about', label: 'About' },
  { href: '/services', label: 'Services' },
  { href: '/contact', label: 'Contact' },
];
const pageTitle = title ? `${title} | ${site.name}` : site.name;
const metaDescription = description ?? site.tagline;
const designTokens = getDesignTokens();
const designColors = designTokens.colors ?? {};
const designBrandColors = designColors.brand ?? {};
const designTextColors = designColors.text ?? {};
const designSurfaceColors = designColors.surface ?? {};
const designBorderColors = designColors.border ?? {};
const designNavigationColors = (designColors as Record<string, any>)?.navigation ?? {};
const designTypography = designTokens.typography ?? {};
const defaultFontStack = `'Inter', system-ui, -apple-system, BlinkMacSystemFont, "Segoe UI", sans-serif`;
const bodyFontFamily = designTypography.fontFamily?.body ?? defaultFontStack;
const headingFontFamily = designTypography.fontFamily?.heading ?? bodyFontFamily;
const primaryColor = designBrandColors.primary ?? site.colors?.primary ?? '#2563eb';
const secondaryColor = designBrandColors.secondary ?? site.colors?.secondary ?? '#0f172a';
const accentColor = designBrandColors.accent ?? site.colors?.accent ?? '#f59e0b';
const textPrimaryColor = designTextColors.primary ?? '#0f172a';
const textSecondaryColor = designTextColors.secondary ?? '#1f2937';
const textMutedColor = designTextColors.muted ?? '#475569';
const textInverseColor = designTextColors.inverse ?? '#f8fafc';
const textInverseMutedColor = designTextColors.inverseMuted ?? '#e2e8f0';
const surfaceBaseColor = designSurfaceColors.base ?? '#f8fafc';
const surfaceCardColor = designSurfaceColors.card ?? '#ffffff';
const surfaceMutedColor = designSurfaceColors.muted ?? '#f1f5f9';
const borderSubtleColor = designBorderColors.subtle ?? 'rgba(15, 23, 42, 0.1)';
const borderStrongColor = designBorderColors.strong ?? 'rgba(15, 23, 42, 0.18)';
const navigationHoverBg = designNavigationColors.hoverBg ?? 'rgba(16, 53, 41, 0.08)';
const navigationActiveBg = designNavigationColors.activeBg ?? primaryColor;
const navigationActiveText = designNavigationColors.activeText ?? textInverseColor;
const navigationActiveShadow =
  designNavigationColors.activeShadow ?? '0 18px 36px -22px rgba(16, 53, 41, 0.35)';
const rawBrandLogo = typeof site.brand?.logo === 'string' ? site.brand.logo.trim() : '';
const brandLogo = rawBrandLogo.length > 0 ? rawBrandLogo : null;
const brandLogoAlt =
  typeof site.brand?.logoAlt === 'string' && site.brand.logoAlt?.trim()?.length
    ? site.brand.logoAlt.trim()
    : site.name ?? 'Brand logo';
const headerHasLogo = showLogoSetting && Boolean(brandLogo);
const footerHasLogo = showFooterLogoSetting && Boolean(brandLogo);
const effectiveHeaderShowName = showBusinessNameSetting || !headerHasLogo;
const effectiveFooterShowName = showFooterBusinessNameSetting || !footerHasLogo;
const headerNameClasses = headerHasLogo
  ? 'text-lg font-semibold leading-tight text-slate-900 group-hover:text-inherit'
  : 'text-[1.6rem] font-semibold text-slate-900 transition hover:text-brand-primary';
const headerBrandLinkClasses = headerHasLogo
  ? 'group inline-flex items-center gap-3 font-semibold text-slate-900 transition hover:text-brand-primary'
  : 'text-[1.6rem] font-semibold text-slate-900 transition hover:text-brand-primary';
const brandLinkLabel = site.name ?? 'Home';
const footerCredit = site.footerCredit;
const preloadImages = ['/images/home-hero.jpg', '/images/about-hero.jpg'];
const primaryRgb = colorToRgb(primaryColor);
const secondaryRgb = colorToRgb(secondaryColor);
const accentRgb = colorToRgb(accentColor);
const surfaceBaseRgb = colorToRgb(surfaceBaseColor);
const surfaceCardRgb = colorToRgb(surfaceCardColor);
const surfaceMutedRgb = colorToRgb(surfaceMutedColor);
const typographyScale = designTypography.scale ?? {};
const typographyVarStrings = [
  buildTypographyVarBlock('display', typographyScale.display),
  buildTypographyVarBlock('heading', typographyScale.heading),
  buildTypographyVarBlock('subheading', typographyScale.subheading),
  buildTypographyVarBlock('body', typographyScale.body),
  buildTypographyVarBlock('eyebrow', typographyScale.eyebrow),
  buildTypographyVarBlock('finePrint', typographyScale.finePrint),
].filter(Boolean);
const showTaglineSetting = showTagline ?? true;
const shouldRenderTagline = !heroIsFullscreen && Boolean(showTaglineSetting && site.tagline?.trim());
const preloaderConfig = site.preloader ?? {};
const isPreloaderEnabled = preloaderConfig.enabled === true;
const preloaderBackgroundColor =
  typeof preloaderConfig.backgroundColor === 'string'
    ? preloaderConfig.backgroundColor.trim() || null
    : null;
const preloaderLogo =
  typeof preloaderConfig.logo === 'string' ? preloaderConfig.logo.trim() || null : null;
const rawPreloaderDuration = Number(preloaderConfig.minimumDurationMs ?? 2000);
const preloaderMinimumDuration = Number.isFinite(rawPreloaderDuration)
  ? Math.max(0, rawPreloaderDuration)
  : 2000;
const shouldRenderPreloader = isPreloaderEnabled;
const preloaderScript = `(() => {
  const preloader = document.getElementById('site-preloader');
  if (!preloader) return;
  const storageKey = 'site-preloader:shown';
  const hasShown = window.sessionStorage.getItem(storageKey) === 'true';

  if (hasShown) {
    preloader.remove();
    return;
  }

  const minimumDuration = ${preloaderMinimumDuration};
  const start = performance.now();
  let hideTriggered = false;
  const triggerHide = () => {
    if (hideTriggered) return;
    hideTriggered = true;
    const elapsed = performance.now() - start;
    const delay = Math.max(minimumDuration - elapsed, 0);
    window.setTimeout(() => {
      preloader.classList.add('is-site-preloader-hidden');
      preloader.addEventListener('transitionend', () => {
        preloader.remove();
        window.sessionStorage.setItem(storageKey, 'true');
      }, { once: true });
    }, delay);
  };
  if (document.readyState === 'complete') {
    triggerHide();
  } else {
    window.addEventListener('load', triggerHide, { once: true });
  }
  window.setTimeout(triggerHide, minimumDuration + 4000);
})();`;
const bodyStyleLines = [
  `  font-family: ${bodyFontFamily};`,
  `  --font-family-body: ${bodyFontFamily};`,
  `  --font-family-heading: ${headingFontFamily};`,
  `  --color-primary: ${primaryColor};`,
  `  --color-secondary: ${secondaryColor};`,
  `  --color-accent: ${accentColor};`,
  `  --color-primary-rgb: ${primaryRgb};`,
  `  --color-secondary-rgb: ${secondaryRgb};`,
  `  --color-accent-rgb: ${accentRgb};`,
  `  --color-text-primary: ${textPrimaryColor};`,
  `  --color-text-primary-rgb: ${colorToRgb(textPrimaryColor)};`,
  `  --color-text-secondary: ${textSecondaryColor};`,
  `  --color-text-secondary-rgb: ${colorToRgb(textSecondaryColor)};`,
  `  --color-text-muted: ${textMutedColor};`,
  `  --color-text-muted-rgb: ${colorToRgb(textMutedColor)};`,
  `  --color-text-inverse: ${textInverseColor};`,
  `  --color-text-inverse-rgb: ${colorToRgb(textInverseColor)};`,
  `  --color-text-inverse-muted: ${textInverseMutedColor};`,
  `  --color-text-inverse-muted-rgb: ${colorToRgb(textInverseMutedColor)};`,
  `  --surface-base: ${surfaceBaseColor};`,
  `  --surface-base-rgb: ${surfaceBaseRgb};`,
  `  --surface-card: ${surfaceCardColor};`,
  `  --surface-card-rgb: ${surfaceCardRgb};`,
  `  --surface-muted: ${surfaceMutedColor};`,
  `  --surface-muted-rgb: ${surfaceMutedRgb};`,
  `  --border-color-subtle: ${borderSubtleColor};`,
  `  --border-color-strong: ${borderStrongColor};`,
  `  --color-nav-hover-bg: ${navigationHoverBg};`,
  `  --color-nav-active-bg: ${navigationActiveBg};`,
  `  --color-nav-active-text: ${navigationActiveText};`,
  `  --shadow-nav-active: ${navigationActiveShadow};`,
];
const bodyStyle = `${[...bodyStyleLines, ...typographyVarStrings].join('\n')}\n`;
const headerClasses =
  'site-header sticky top-0 left-0 right-0 z-40 w-full bg-white/90 backdrop-blur supports-[backdrop-filter]:bg-white/80 border-b border-slate-200/80 shadow-sm';
const mainClassList = {
  'flex-1': true,
  'pb-16': true,
  'pt-0': heroIsFullscreen,
  'pt-6': !heroIsFullscreen && shouldRenderTagline,
  'pt-12': !heroIsFullscreen && !shouldRenderTagline,
};
---
<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="utf-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1" />
    <title>{pageTitle}</title>
    <meta name="description" content={metaDescription} />
    <link rel="preconnect" href="https://fonts.googleapis.com" />
    <link rel="preconnect" href="https://fonts.gstatic.com" crossorigin />
    <link
      href="https://fonts.googleapis.com/css2?family=Inter:wght@400;500;600;700&display=swap"
      rel="stylesheet"
    />
    {preloadImages.map((href) => (
      <link rel="preload" as="image" href={href} />
    ))}
  </head>
  <body class="bg-surface-base text-surface antialiased" style={bodyStyle}>
    {shouldRenderPreloader && (
      <div
        id="site-preloader"
        class="site-preloader"
        style={preloaderBackgroundColor ? `--preloader-background: ${preloaderBackgroundColor};` : undefined}
        aria-hidden="true"
      >
        {preloaderLogo && (
          <img
            src={preloaderLogo}
            alt=""
            class="site-preloader__logo"
            loading="eager"
            decoding="async"
          />
        )}
      </div>
    )}
    {shouldRenderPreloader && <script is:inline set:html={preloaderScript}></script>}
    <a href="#main" class="sr-only focus:not-sr-only focus:absolute focus:top-4 focus:left-4 focus:z-50 focus:rounded focus:bg-white focus:px-4 focus:py-2 focus:text-sm focus:font-medium focus:text-slate-900">
      Skip to content
    </a>
    <header class={headerClasses} style="--header-height: 5rem;">
      <div class="mx-auto flex h-20 w-full max-w-6xl items-center justify-between border-b border-slate-200/80 px-6">
        <a href="/" class={headerBrandLinkClasses}>
          {headerHasLogo && (
            <img
              src={brandLogo ?? ''}
              alt={brandLinkLabel}
              class={`rounded-sm ${headerLogoHeightClass} w-auto transition`}
              loading="lazy"
              decoding="async"
            />
          )}
          {effectiveHeaderShowName && <span class={headerNameClasses}>{brandLinkLabel}</span>}
        </a>
        <nav class="flex items-center gap-2 text-sm font-medium text-slate-600">
          {navItems.map(({ href, label }) => {
            const normalizedHref = normalizePath(href);
            const isActive = normalizedHref === currentPath;
            const baseClasses =
              'rounded-full px-4 py-2 transition-[color,background-color,box-shadow,transform] duration-500 ease-[cubic-bezier(.16,1,.3,1)] hover:bg-[var(--color-nav-hover-bg)] hover:text-brand-primary focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-brand-primary/35 focus-visible:ring-offset-2 focus-visible:ring-offset-white';
            const activeClasses = isActive
              ? 'bg-[var(--color-nav-active-bg)] text-[var(--color-nav-active-text)] shadow-nav-active'
              : '';

            return (
              <a
                href={href}
                class={`${baseClasses} ${activeClasses}`.trim()}
                aria-current={isActive ? 'page' : undefined}
              >
                {label}
              </a>
            );
          })}
        </nav>
      </div>
    </header>
    <div class="mx-auto flex min-h-screen w-full max-w-6xl flex-col px-6">
      {shouldRenderTagline && (
        <p class="pt-6 text-sm font-medium uppercase tracking-[0.2em] text-slate-500">
          {site.tagline}
        </p>
      )}
      <main id="main" class:list={mainClassList}>
        <slot />
      </main>
      <footer class="border-t border-slate-200 py-8 text-sm text-slate-500">
        <div class="flex flex-col gap-6">
          <div class="flex flex-col gap-4 sm:flex-row sm:items-center sm:justify-between">
            {footerHasLogo && (
              <a
                href="/"
                class="inline-flex items-center gap-3 font-semibold text-slate-700 transition hover:text-brand-primary"
              >
                <img
                  src={brandLogo ?? ''}
                  alt={brandLogoAlt}
                  class={`rounded-sm ${footerLogoHeightClass} w-auto transition`}
                  loading="lazy"
                  decoding="async"
                />
                {effectiveFooterShowName && (
                  <span class="text-base font-semibold leading-tight">{brandLinkLabel}</span>
                )}
              </a>
            )}
            {!footerHasLogo && effectiveFooterShowName && (
              <span class="text-base font-semibold text-slate-700">{brandLinkLabel}</span>
            )}
            <div class="flex flex-wrap items-center gap-4">
              {getSocialLinks().map(([key, url]) => (
                <a
                  href={url}
                  class="capitalize transition-colors hover:text-brand-primary"
                >
                  {key}
                </a>
              ))}
              {footerCredit?.label && footerCredit?.href && (
                <span class="hidden h-4 w-px bg-slate-200 sm:inline" aria-hidden="true"></span>
              )}
              {footerCredit?.label && footerCredit?.href && (
                <a
                  href={footerCredit.href}
                  class="font-medium text-slate-600 transition-colors hover:text-brand-primary"
                  target="_blank"
                  rel="noreferrer"
                >
                  {footerCredit.label}
                </a>
              )}
            </div>
          </div>
          <p class="text-xs text-slate-500">&copy; {new Date().getFullYear()} {brandLinkLabel}. All rights reserved.</p>
        </div>
      </footer>
    </div>
  </body>
</html>
