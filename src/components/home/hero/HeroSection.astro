---
import {
  site,
  home,
  getHeroVariant,
  getHeroBackgroundTone,
  isHeroAnimationEnabled,
} from '../../../config/content';
import {
  normalizeBackgroundTone,
  normalizeBackgroundColor,
  sectionBackgroundClass,
  sectionBackgroundToneAttr,
  createBackgroundStyle,
} from '../../../utils/background';
import type { SiteContent } from '../../../types/content';
import HeroClassic from './HeroClassic.astro';
import HeroSplit from './HeroSplit.astro';
import HeroFullscreen from './HeroFullscreen.astro';

const variants: Record<string, any> = {
  classic: HeroClassic,
  split: HeroSplit,
  fullscreen: HeroFullscreen,
};

const variantKey = getHeroVariant();
const SelectedComponent = variants[variantKey] ?? variants.classic;
const HeroComponent = variantKey === 'none' ? null : SelectedComponent;
const hero = home.hero ?? {};
const props = (Astro.props ?? {}) as Record<string, any>;
const {
  backgroundTone: overrideTone,
  backgroundColor: overrideColor,
  backgroundClass: overrideClass,
  animation: animationOverride,
  ...restProps
} = props;
const fallbackTone = getHeroBackgroundTone();
const normalizedTone = normalizeBackgroundTone(overrideTone ?? hero.background?.tone ?? fallbackTone);
const backgroundClass = overrideClass ?? sectionBackgroundClass(normalizedTone);
const backgroundToneAttr = sectionBackgroundToneAttr(normalizedTone);
const backgroundColor = normalizeBackgroundColor(overrideColor ?? hero.background?.color);
const backgroundStyle = createBackgroundStyle(backgroundColor, normalizedTone);
const animationSetting = animationOverride ?? hero.animation;
const animationEnabled = animationSetting ?? isHeroAnimationEnabled();
const isFullscreenVariant = variantKey === 'fullscreen';
const heroProps = {
  site: site as SiteContent,
  hero,
  backgroundClass,
  backgroundTone: backgroundToneAttr,
  backgroundStyle,
  animationEnabled: animationEnabled !== false,
  ...restProps,
};
---
{isFullscreenVariant && HeroComponent ? (
  <div class="relative" data-home-hero>
    <HeroComponent {...heroProps} />
    <button
      type="button"
      class="fullscreen-hero__scroll-button"
      data-home-hero-scroll
      aria-label="Scroll down"
      data-visible="false"
    >
      <svg viewBox="0 0 20 20" fill="none" aria-hidden="true" class="h-5 w-5">
        <path
          d="M4.5 7.5L10 13l5.5-5.5"
          stroke="currentColor"
          stroke-width="1.8"
          stroke-linecap="round"
          stroke-linejoin="round"
        />
      </svg>
    </button>
  </div>
) : HeroComponent ? <HeroComponent {...heroProps} /> : null}

{isFullscreenVariant ? (
  <script>
    const init = () => {
      const root = document.querySelector('[data-home-hero]');
      const button = root?.querySelector('[data-home-hero-scroll]');
      if (!(button instanceof HTMLElement)) return;
      button.addEventListener('click', () => {
        const target = document.getElementById('home-scroll-target');
        if (!(target instanceof HTMLElement)) return;
        const rect = target.getBoundingClientRect();
        const offset = rect.top + window.scrollY;
        const adjust = offset - 32;
        window.scrollTo({ top: adjust, behavior: 'smooth' });
      });

      requestAnimationFrame(() => {
        button.dataset.visible = 'true';
      });
    };

    if (document.readyState === 'loading') {
      document.addEventListener('DOMContentLoaded', init, { once: true });
    } else {
      init();
    }
  </script>
) : null}
