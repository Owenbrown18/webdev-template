---
import { home, getFeaturedProjectBackgroundTone, isFeaturedProjectAnimationEnabled } from '../../../config/content';
import {
  normalizeBackgroundTone,
  normalizeBackgroundColor,
  sectionBackgroundClass,
  sectionBackgroundToneAttr,
  createBackgroundStyle,
} from '../../../utils/background';

type ModalContent = {
  title?: string | null;
  body?: string | null;
};

const settings = (home.featuredProject ?? {}) as {
  variant?: string | null;
  background?: { tone?: string | null; color?: string | null };
  animation?: boolean | null;
  eyebrow?: string | null;
  title?: string | null;
  intro?: string | null;
  image?: { src?: string | null; alt?: string | null } | null;
  modal?: ModalContent | null;
};
const props = (Astro.props ?? {}) as Record<string, any>;
const {
  backgroundTone: overrideTone,
  backgroundColor: overrideColor,
  backgroundClass: overrideClass,
  animation: animationOverride,
  eyebrow: eyebrowOverride,
  title: titleOverride,
  intro: introOverride,
  image: imageOverride,
  modal: modalOverride,
  variant: variantOverride,
  ...restProps
} = props;

const variant =
  typeof variantOverride === 'string'
    ? variantOverride.trim().toLowerCase()
    : settings.variant?.trim?.().toLowerCase?.() ?? 'project';

const fallbackTone = getFeaturedProjectBackgroundTone();
const backgroundTone = normalizeBackgroundTone(overrideTone ?? settings.background?.tone ?? fallbackTone);
const backgroundClass = overrideClass ?? sectionBackgroundClass(backgroundTone);
const backgroundToneAttr = sectionBackgroundToneAttr(backgroundTone);
const backgroundColor = normalizeBackgroundColor(overrideColor ?? settings.background?.color);
const backgroundStyle = createBackgroundStyle(backgroundColor, backgroundTone);

const animationSetting = animationOverride ?? settings.animation;
const animationEnabled = animationSetting ?? isFeaturedProjectAnimationEnabled();
const shouldAnimate = animationEnabled !== false;

const eyebrow = (eyebrowOverride ?? settings.eyebrow ?? undefined) as string | undefined;
const title = (titleOverride ?? settings.title ?? undefined) as string | undefined;
const intro = (introOverride ?? settings.intro ?? undefined) as string | undefined;

const imageConfig =
  imageOverride && typeof imageOverride === 'object'
    ? (imageOverride as { src?: string | null; alt?: string | null })
    : settings.image ?? {};
const imageSrc =
  typeof imageConfig?.src === 'string' && imageConfig.src.trim().length > 0
    ? imageConfig.src.trim()
    : undefined;
const imageAlt = typeof imageConfig?.alt === 'string' ? imageConfig.alt : '';

const modalConfig = (modalOverride ?? settings.modal ?? {}) as ModalContent;
const modalTitle = typeof modalConfig.title === 'string' ? modalConfig.title.trim() : '';
const modalBodyRaw = typeof modalConfig.body === 'string' ? modalConfig.body.trim() : '';
const modalParagraphs = modalBodyRaw.length > 0 ? modalBodyRaw.split(/\n\s*\n/) : [];
const hasModal = Boolean(modalTitle || modalParagraphs.length > 0);

const shouldRender =
  variant !== 'none' &&
  Boolean(imageSrc) &&
  Boolean(eyebrow || title || intro);

const sectionClasses = [backgroundClass, 'section-shell'].filter(Boolean).join(' ');
const containerClasses = [
  'section-container max-w-5xl space-y-10 text-center',
  shouldAnimate
    ? 'motion-safe:opacity-0 motion-safe:translate-y-6 motion-safe:transition-all motion-safe:duration-[900ms] motion-safe:ease-out data-[visible=true]:motion-safe:translate-y-0 data-[visible=true]:motion-safe:opacity-100'
    : '',
]
  .filter(Boolean)
  .join(' ');
const imageWrapperClasses =
  'relative mx-auto w-full max-w-4xl overflow-hidden rounded-[1.75rem] border border-slate-200/70 bg-white shadow-card';
const imageClasses = 'aspect-[16/9] w-full object-cover';
const animationAttr = shouldAnimate ? 'true' : 'false';
---
{shouldRender ? (
  <section
    class={sectionClasses}
    data-background-tone={backgroundToneAttr ?? undefined}
    style={backgroundStyle}
    data-featured-project-root={animationAttr}
    {...restProps}
  >
    <div class={containerClasses} data-featured-project-content>
      {(eyebrow || title || intro) && (
        <div class="space-y-4">
          {eyebrow && <p class="section-eyebrow">{eyebrow}</p>}
          {title && <h2 class="section-heading">{title}</h2>}
          {intro && <p class="section-subtitle mx-auto max-w-3xl">{intro}</p>}
        </div>
      )}
      <figure class={imageWrapperClasses}>
        <img src={imageSrc} alt={imageAlt ?? ''} class={imageClasses} loading="lazy" decoding="async" />
      </figure>
      {hasModal ? (
        <div>
          <button
            type="button"
            class="inline-flex items-center justify-center rounded-full bg-brand-primary px-6 py-3 text-base font-semibold text-white shadow-brand-glow transition hover:bg-brand-primary/90 focus:outline-none focus-visible:ring-2 focus-visible:ring-brand-primary/60 focus-visible:ring-offset-2 focus-visible:ring-offset-white"
            data-featured-project-trigger
            aria-haspopup="dialog"
            aria-controls="featured-project-modal"
          >
            Read more
          </button>
        </div>
      ) : null}
    </div>
    {hasModal ? (
      <div
        class="featured-project-modal"
        data-featured-project-modal
        data-state=""
        id="featured-project-modal"
        role="dialog"
        aria-modal="true"
        aria-hidden="true"
        aria-labelledby="featured-project-modal-title"
        hidden
      >
        <div class="featured-project-modal__overlay" data-featured-project-overlay></div>
        <div class="featured-project-modal__content" data-featured-project-content tabindex="-1">
          <button
            type="button"
            class="featured-project-modal__close"
            data-featured-project-close
            aria-label="Close featured project details"
          >
            Ã—
          </button>
          <div class="featured-project-modal__header">
            {eyebrow && <p class="featured-project-modal__eyebrow">{eyebrow}</p>}
            <h3 class="featured-project-modal__title" id="featured-project-modal-title">
              {modalTitle || title || 'Featured project'}
            </h3>
          </div>
          <div class="featured-project-modal__body">
            {modalParagraphs.length > 0 ? (
              modalParagraphs.map((paragraph) => <p>{paragraph}</p>)
            ) : intro ? (
              <p>{intro}</p>
            ) : null}
          </div>
        </div>
      </div>
    ) : null}
    {shouldAnimate || hasModal ? (
      <script>
        const roots = Array.from(document.querySelectorAll('[data-featured-project-root]'));
        const focusableSelector =
          'a[href], button:not([disabled]), textarea:not([disabled]), input:not([disabled]), select:not([disabled]), [tabindex]:not([tabindex="-1"])';
        const supportMatchMedia = typeof window !== 'undefined' && typeof window.matchMedia === 'function';
        const prefersReducedMotion = supportMatchMedia
          ? window.matchMedia('(prefers-reduced-motion: reduce)').matches
          : false;

        roots.forEach((root) => {
          if (!(root instanceof HTMLElement)) return;

          const shouldAnimate = root.dataset.featuredProjectRoot === 'true';
          const content = root.querySelector('[data-featured-project-content]');
          if (shouldAnimate && content instanceof HTMLElement) {
            content.dataset.visible = 'true';
          }

          const modal = root.querySelector('[data-featured-project-modal]');
          const trigger = root.querySelector('[data-featured-project-trigger]');
          if (!(modal instanceof HTMLElement) || !(trigger instanceof HTMLElement)) {
            return;
          }

          const overlay = modal.querySelector('[data-featured-project-overlay]');
          const closeButton = modal.querySelector('[data-featured-project-close]');
          const focusTarget = modal.querySelector('[data-featured-project-content]');
          let activeModal = false;
          let previousFocus: Element | null = null;

          const getFocusable = (): HTMLElement[] =>
            Array.from(modal.querySelectorAll(focusableSelector)).filter(
              (el): el is HTMLElement => el instanceof HTMLElement && !el.hasAttribute('disabled'),
            );

          const closeModal = () => {
            if (!activeModal) return;
            activeModal = false;

            const finish = () => {
              modal.hidden = true;
              modal.dataset.state = '';
              modal.setAttribute('aria-hidden', 'true');
              if (previousFocus instanceof HTMLElement) {
                previousFocus.focus();
              }
            };

            if (!prefersReducedMotion && modal.dataset.state === 'open') {
              modal.dataset.state = 'closing';
              const contentEl = modal.querySelector('[data-featured-project-content]');
              if (contentEl instanceof HTMLElement) {
                const listener = () => {
                  contentEl.removeEventListener('transitionend', listener);
                  finish();
                };
                contentEl.addEventListener('transitionend', listener);
              } else {
                finish();
              }
            } else {
              finish();
            }
          };

          const trapFocus = (event: KeyboardEvent) => {
            if (!activeModal || event.key !== 'Tab') return;
            const focusable = getFocusable();
            if (focusable.length === 0) {
              event.preventDefault();
              return;
            }
            const first = focusable[0];
            const last = focusable[focusable.length - 1];
            if (event.shiftKey) {
              if (document.activeElement === first) {
                event.preventDefault();
                last.focus();
              }
            } else if (document.activeElement === last) {
              event.preventDefault();
              first.focus();
            }
          };

          const openModal = () => {
            if (activeModal) return;
            activeModal = true;
            previousFocus = document.activeElement;
            modal.hidden = false;
            modal.dataset.state = prefersReducedMotion ? 'open' : 'opening';
            modal.setAttribute('aria-hidden', 'false');

            window.requestAnimationFrame(() => {
              if (!modal.isConnected) return;
              if (!prefersReducedMotion) {
                modal.dataset.state = 'open';
              }
              const target =
                (focusTarget instanceof HTMLElement && focusTarget) || modal;
              if (target instanceof HTMLElement) {
                target.focus();
              }
            });
          };

          trigger.addEventListener('click', openModal);
          overlay?.addEventListener('click', closeModal);
          closeButton?.addEventListener('click', closeModal);

          modal.addEventListener('keydown', (event) => {
            if (event.key === 'Escape') {
              event.preventDefault();
              closeModal();
            } else {
              trapFocus(event);
            }
          });

          modal.addEventListener('astro:before-remove', () => {
            if (activeModal) {
              closeModal();
            }
          });
        });
      </script>
    ) : null}
    <style>
      .featured-project-modal {
        position: fixed;
        inset: 0;
        z-index: 80;
        display: flex;
        align-items: center;
        justify-content: center;
        padding: 2rem;
      }

      .featured-project-modal[hidden] {
        display: none;
      }

      .featured-project-modal__overlay {
        position: absolute;
        inset: 0;
        background: rgba(15, 23, 42, 0.45);
        opacity: 0;
        transition: opacity 220ms ease;
      }

      .featured-project-modal__content {
        position: relative;
        z-index: 1;
        max-width: min(580px, 90vw);
        width: 100%;
        border-radius: 1.75rem;
        background: white;
        padding: 2.5rem 2.25rem;
        box-shadow: 0 24px 60px -28px rgba(15, 23, 42, 0.35);
        opacity: 0;
        transform: translateY(18px);
        outline: none;
        transition: opacity 240ms ease, transform 240ms ease;
      }

      .featured-project-modal[data-state='open'] .featured-project-modal__overlay {
        opacity: 1;
      }

      .featured-project-modal[data-state='open'] .featured-project-modal__content {
        opacity: 1;
        transform: translateY(0);
      }

      .featured-project-modal[data-state='closing'] .featured-project-modal__overlay {
        opacity: 0;
      }

      .featured-project-modal[data-state='closing'] .featured-project-modal__content {
        opacity: 0;
        transform: translateY(18px);
      }

      .featured-project-modal__close {
        position: absolute;
        top: 1rem;
        right: 1rem;
        display: inline-flex;
        align-items: center;
        justify-content: center;
        width: 2.25rem;
        height: 2.25rem;
        border-radius: 999px;
        background: rgba(15, 23, 42, 0.06);
        color: rgba(15, 23, 42, 0.65);
        font-size: 1.25rem;
        line-height: 1;
        transition: background 180ms ease, color 180ms ease;
      }

      .featured-project-modal__close:hover,
      .featured-project-modal__close:focus-visible {
        background: rgba(16, 53, 41, 0.12);
        color: rgb(16, 53, 41);
      }

      .featured-project-modal__header {
        display: flex;
        flex-direction: column;
        gap: 0.5rem;
        text-align: left;
      }

      .featured-project-modal__eyebrow {
        font-size: 0.75rem;
        font-weight: 600;
        letter-spacing: 0.28em;
        text-transform: uppercase;
        color: rgba(var(--color-primary-rgb), 0.65);
      }

      .featured-project-modal__title {
        font-size: 1.5rem;
        font-weight: 600;
        color: rgb(15, 23, 42);
      }

      .featured-project-modal__body {
        margin-top: 1.5rem;
        display: grid;
        gap: 1rem;
        text-align: left;
        color: rgb(71, 85, 105);
        line-height: 1.7;
        font-size: 0.95rem;
      }

      @media (max-width: 640px) {
        .featured-project-modal {
          padding: 1.5rem;
        }

        .featured-project-modal__content {
          padding: 2rem 1.75rem;
        }
      }
    </style>
  </section>
) : null}
