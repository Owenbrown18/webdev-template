---
import { home, getFeaturedPhotosBackgroundTone, isFeaturedPhotosAnimationEnabled, getFeaturedPhotosVariant } from '../../../config/content';
import {
  normalizeBackgroundTone,
  normalizeBackgroundColor,
  sectionBackgroundClass,
  sectionBackgroundToneAttr,
  createBackgroundStyle,
} from '../../../utils/background';

type FeaturedPhotoItem = {
  src?: string | null;
  alt?: string | null;
};

type FeaturedPhotoDisplayItem = {
  src: string;
  alt?: string | null;
};

const settings = home.featuredPhotos ?? {};
const props = (Astro.props ?? {}) as Record<string, any>;
const {
  backgroundTone: overrideTone,
  backgroundColor: overrideColor,
  backgroundClass: overrideClass,
  animation: animationOverride,
  items: itemsOverride,
  variant: variantOverride,
  ...restProps
} = props;

const rawVariant =
  typeof variantOverride === 'string'
    ? variantOverride.trim().toLowerCase()
    : settings.variant?.trim?.().toLowerCase?.();
const variant = rawVariant ?? getFeaturedPhotosVariant();

const fallbackTone = getFeaturedPhotosBackgroundTone();
const backgroundTone = normalizeBackgroundTone(overrideTone ?? settings.background?.tone ?? fallbackTone);
const backgroundClass = overrideClass ?? sectionBackgroundClass(backgroundTone);
const backgroundToneAttr = sectionBackgroundToneAttr(backgroundTone);
const backgroundColor = normalizeBackgroundColor(overrideColor ?? settings.background?.color);
const backgroundStyle = createBackgroundStyle(backgroundColor, backgroundTone);
const animationSetting = animationOverride ?? settings.animation;
const animationEnabled = animationSetting ?? isFeaturedPhotosAnimationEnabled();

const itemsSource = Array.isArray(itemsOverride) ? itemsOverride : settings.items;
const items = Array.isArray(itemsSource) ? (itemsSource as FeaturedPhotoItem[]) : [];
const filteredItems: FeaturedPhotoDisplayItem[] = items.reduce(
  (acc, item) => {
    if (typeof item?.src === 'string') {
      const trimmed = item.src.trim();
      if (trimmed.length > 0) {
        acc.push({
          src: trimmed,
          alt: typeof item.alt === 'string' ? item.alt : item.alt ?? null,
        });
      }
    }
    return acc;
  },
  [] as FeaturedPhotoDisplayItem[],
);

const shouldRender = variant !== 'none' && filteredItems.length > 0;
const shouldAnimate = animationEnabled !== false;
const sectionClasses = [backgroundClass, 'section-shell pt-10 pb-10 sm:pt-14 sm:pb-14'].filter(Boolean).join(' ');
const containerClasses = [
  'section-container max-w-7xl',
  shouldAnimate
    ? 'motion-safe:opacity-0 motion-safe:-translate-y-4 motion-safe:transition-all motion-safe:duration-[900ms] motion-safe:ease-out data-[visible=true]:motion-safe:translate-y-0 data-[visible=true]:motion-safe:opacity-100'
    : '',
]
  .filter(Boolean)
  .join(' ');
const animationAttr = shouldAnimate ? 'true' : 'false';

const gridClass = (() => {
  const count = filteredItems.length;
  if (count <= 1) return 'grid justify-center gap-12';
  if (count === 2) return 'grid gap-12 sm:grid-cols-2 lg:grid-cols-2 justify-items-center';
  return 'grid gap-12 sm:grid-cols-2 lg:grid-cols-3';
})();
---
{shouldRender ? (
  <section
    class={sectionClasses}
    data-background-tone={backgroundToneAttr ?? undefined}
    style={backgroundStyle}
    data-featured-photos-root={animationAttr}
    {...restProps}
  >
    <div class={containerClasses} data-featured-photos-container>
      <div class={`${gridClass}`}>
        {filteredItems.map((item: FeaturedPhotoDisplayItem, index: number) => {
          const altText = typeof item.alt === 'string' ? item.alt : item.alt ?? '';
          return (
            <figure
              class="surface-card surface-card-static overflow-hidden rounded-xl border border-slate-200/60 bg-white shadow-card-soft"
              style={shouldAnimate ? `transition-delay: ${index * 80}ms;` : undefined}
              data-featured-photo
            >
              <div class="aspect-[16/9] w-full">
                <img src={item.src} alt={altText} class="h-full w-full object-cover" loading="lazy" decoding="async" />
              </div>
            </figure>
          );
        })}
      </div>
    </div>
    {shouldAnimate ? (
      <script>
        const isHTMLElement = (node: Element): node is HTMLElement => node instanceof HTMLElement;

        const roots = Array.from(document.querySelectorAll('[data-featured-photos-root="true"]')).filter(
          isHTMLElement,
        );
        const supportMatchMedia = typeof window !== 'undefined' && typeof window.matchMedia === 'function';
        const prefersReducedMotion = supportMatchMedia
          ? window.matchMedia('(prefers-reduced-motion: reduce)').matches
          : false;
        const reveal = (element: HTMLElement) => {
          element.dataset.visible = 'true';
        };

        roots.forEach((root) => {
          if (root.dataset.featuredPhotosAnimated === 'true') return;

          const containerNode = root.querySelector('[data-featured-photos-container]');
          const container = containerNode instanceof HTMLElement ? containerNode : null;
          const photoNodeList = root.querySelectorAll('[data-featured-photo]');
          const photos = Array.from(photoNodeList).filter(isHTMLElement);

          root.dataset.featuredPhotosAnimated = 'true';

          const targets: HTMLElement[] = [];
          if (container) {
            targets.push(container);
          }
          targets.push(...photos);

          if (prefersReducedMotion || !('IntersectionObserver' in window)) {
            targets.forEach(reveal);
            return;
          }

          const observer = new IntersectionObserver(
            (entries, obs): void => {
              entries.forEach((entry) => {
                if (entry.isIntersecting) {
                  if (entry.target instanceof HTMLElement) {
                    reveal(entry.target);
                  }
                  obs.unobserve(entry.target);
                }
              });
            },
            {
              rootMargin: '0px 0px -10% 0px',
              threshold: 0.1,
            },
          );

          targets.forEach((target) => {
            observer.observe(target);
          });
        });
      </script>
    ) : null}
  </section>
) : null}
