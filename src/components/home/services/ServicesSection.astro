---
import type { ServicesListContent } from '../../../types/content';
import {
  services,
  home,
  getServicesVariant,
  getServicesBackgroundTone,
  isServicesAnimationEnabled,
} from '../../../config/content';
import {
  normalizeBackgroundTone,
  normalizeBackgroundColor,
  sectionBackgroundClass,
  sectionBackgroundToneAttr,
  createBackgroundStyle,
} from '../../../utils/background';
import ServicesGrid from './ServicesGrid.astro';
import ServicesList from './ServicesList.astro';
import ServicesSpotlight from './ServicesSpotlight.astro';

const variants: Record<string, any> = {
  grid: ServicesGrid,
  list: ServicesList,
  spotlight: ServicesSpotlight,
};

const settings = home.services ?? {};
const props = (Astro.props ?? {}) as Record<string, any>;
const variantOverride = typeof props.variant === 'string' ? props.variant.trim().toLowerCase() : undefined;
const variantKey = variantOverride ?? getServicesVariant();
const Component = variantKey === 'none' ? null : variants[variantKey] ?? variants.grid;
const title = settings.title ?? 'Our Services';
const intro = settings.intro ?? 'Support tailored to your needs.';
const eyebrow = settings.eyebrow ?? 'What we do';
const {
  backgroundTone: overrideTone,
  backgroundColor: overrideColor,
  backgroundClass: overrideClass,
  animation: animationOverride,
  ...restProps
} = props;
delete restProps.variant;
const fallbackTone = getServicesBackgroundTone();
const backgroundTone = normalizeBackgroundTone(overrideTone ?? settings.background?.tone ?? fallbackTone);
const backgroundClass = overrideClass ?? sectionBackgroundClass(backgroundTone);
const backgroundToneAttr = sectionBackgroundToneAttr(backgroundTone);
const backgroundColor = normalizeBackgroundColor(overrideColor ?? settings.background?.color);
const backgroundStyle = createBackgroundStyle(backgroundColor, backgroundTone);
const animationSetting = animationOverride ?? settings.animation;
const animationEnabled = animationSetting ?? isServicesAnimationEnabled();
const mode = (props.mode ?? 'teaser') as 'teaser' | 'detailed';
const itemHrefFallback = props.itemHrefFallback as string | null | undefined;
const componentProps = {
  mode,
  itemHrefFallback: itemHrefFallback ?? undefined,
  animationEnabled: animationEnabled !== false,
};
---
{Component ? (
  <Component
    services={services as ServicesListContent}
    title={title}
    intro={intro}
    eyebrow={eyebrow}
    backgroundClass={backgroundClass}
    backgroundTone={backgroundToneAttr}
    backgroundStyle={backgroundStyle}
    {...componentProps}
    {...restProps}
  />
) : null}
