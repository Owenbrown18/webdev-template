---
import type { ServicesListContent, ServicesListItem } from '../../../types/content';

interface Props {
  services: ServicesListContent;
  title?: string;
  intro?: string;
  eyebrow?: string;
  backgroundClass?: string;
  backgroundTone?: string;
  backgroundStyle?: string;
  animationEnabled?: boolean;
  itemHrefFallback?: string | null;
}

const {
  services,
  title = 'More Services We Offer',
  intro = '',
  eyebrow,
  backgroundClass,
  backgroundTone,
  backgroundStyle,
  animationEnabled = true,
  itemHrefFallback,
} = Astro.props as Props;

const items = Array.isArray(services.items) ? services.items.filter(Boolean) : [];
const sectionClasses = [backgroundClass, 'section-shell'].filter(Boolean).join(' ');
const shouldAnimate = animationEnabled !== false;
const containerClasses = [
  'section-container max-w-5xl text-center space-y-10',
  shouldAnimate
    ? 'motion-safe:opacity-0 motion-safe:translate-y-6 motion-safe:transition-all motion-safe:duration-[900ms] motion-safe:ease-out data-[visible=true]:motion-safe:opacity-100 data-[visible=true]:motion-safe:translate-y-0'
    : '',
]
  .filter(Boolean)
  .join(' ');

const cardAnimationClasses = shouldAnimate
  ? 'motion-safe:opacity-0 motion-safe:translate-y-4 motion-safe:transition-all motion-safe:duration-[1000ms] motion-safe:ease-out data-[visible=true]:motion-safe:translate-y-0 data-[visible=true]:motion-safe:opacity-100'
  : '';
const baseCardClasses = [
  'surface-card',
  'surface-card-interactive',
  'group',
  'transition-all',
  'duration-300',
  'ease-[cubic-bezier(.16,1,.3,1)]',
  'hover:-translate-y-2',
  'hover:shadow-brand-glow',
  'hover:border-brand-primary/40',
  'focus-visible:border-brand-primary/40',
  'focus-visible:shadow-brand-glow',
  'w-full',
  'max-w-[18rem]',
  'flex',
  'h-full',
  'flex-col',
  'items-center',
  'justify-center',
  'gap-3',
  'p-6',
  'sm:p-7',
  'text-center',
  'text-slate-700',
  'transition',
  'focus-visible:outline-none',
  'focus-visible:ring-2',
  'focus-visible:ring-brand-primary/40',
  'focus-visible:ring-offset-2',
  'focus-visible:ring-offset-white',
];

const safeHref = (item: ServicesListItem) => {
  const slug = typeof item.slug === 'string' ? item.slug.trim() : '';
  if (slug) return `/services#${slug}`;
  const explicit = item.link?.href?.trim();
  if (explicit) return explicit;
  if (typeof itemHrefFallback === 'string' && itemHrefFallback.trim().length > 0) {
    return itemHrefFallback.trim();
  }
  return '/services';
};

const resolveLabel = (item: ServicesListItem) => item.link?.label?.trim();

const animationAttr = shouldAnimate ? 'true' : 'false';
const gridClasses = [
  'grid',
  'grid-cols-1',
  'gap-6',
  'justify-center',
  'justify-items-center',
  'sm:[grid-template-columns:repeat(auto-fit,minmax(15rem,1fr))]',
].join(' ');
---
{items.length > 0 ? (
  <section
    class={sectionClasses}
    data-background-tone={backgroundTone ?? undefined}
    style={backgroundStyle}
    data-services-brief-root={animationAttr}
  >
    <div class={containerClasses} data-services-brief-container>
      {(eyebrow || title || intro) && (
        <div class="space-y-4">
          {eyebrow && <p class="section-eyebrow">{eyebrow}</p>}
          {title && <h2 class="section-heading">{title}</h2>}
          {intro && <p class="section-subtitle mx-auto max-w-4xl">{intro}</p>}
        </div>
      )}
      <div class={gridClasses}>
        {items.map((item, index) => {
          const href = safeHref(item);
          const label = item.title ?? resolveLabel(item) ?? 'View service';
          const delayStyle = shouldAnimate ? `transition-delay: ${index * 80}ms;` : undefined;
          const cardClasses = [...baseCardClasses, cardAnimationClasses].filter(Boolean).join(' ');
          return (
            <a
              href={href}
              class={cardClasses}
              data-services-brief-item
              style={delayStyle}
            >
              <span class="relative flex h-12 w-12 items-center justify-center overflow-hidden rounded-full bg-brand-primary/10 text-2xl text-brand-primary transition-colors duration-500 ease-[cubic-bezier(.16,1,.3,1)] group-hover:text-white">
                <span
                  class="absolute inset-0 rounded-full bg-brand-primary opacity-0 transition-opacity duration-500 ease-[cubic-bezier(.16,1,.3,1)] group-hover:opacity-100"
                  aria-hidden="true"
                ></span>
                <span class="relative z-[1]">{item.icon ?? 'â€¢'}</span>
              </span>
              <span class="text-sm font-semibold leading-5 text-current text-center transition-colors duration-300 ease-[cubic-bezier(.16,1,.3,1)] group-hover:text-slate-900">
                {label}
              </span>
            </a>
          );
        })}
      </div>
      <div>
        <a
          href="/services"
          class="inline-flex items-center justify-center rounded-full bg-brand-primary px-6 py-3 text-base font-semibold text-white shadow-brand-glow transition hover:bg-brand-primary/90 focus:outline-none focus-visible:ring-2 focus-visible:ring-brand-primary/60 focus-visible:ring-offset-2 focus-visible:ring-offset-white"
        >
          Browse our Services
        </a>
      </div>
    </div>
    {shouldAnimate ? (
      <script>
        const roots = Array.from(document.querySelectorAll('[data-services-brief-root="true"]'));
        const supportMatchMedia = typeof window !== 'undefined' && typeof window.matchMedia === 'function';
        const prefersReducedMotion = supportMatchMedia
          ? window.matchMedia('(prefers-reduced-motion: reduce)').matches
          : false;
        const reveal = (el) => {
          if (el instanceof HTMLElement) {
            el.dataset.visible = 'true';
          }
        };

        roots.forEach((root) => {
          if (!(root instanceof HTMLElement)) return;
          if (root.dataset.briefAnimated === 'true') return;
          const container = root.querySelector('[data-services-brief-container]');
          const items = Array.from(root.querySelectorAll('[data-services-brief-item]'));
          const targets = [container, ...items];
          root.dataset.briefAnimated = 'true';

          if (prefersReducedMotion || !('IntersectionObserver' in window)) {
            targets.forEach((target) => reveal(target));
            return;
          }

          const observer = new IntersectionObserver(
            (entries, obs) => {
              entries.forEach((entry) => {
                if (entry.isIntersecting) {
                  reveal(entry.target);
                  obs.unobserve(entry.target);
                }
              });
            },
            {
              rootMargin: '0px 0px -10% 0px',
              threshold: 0.12,
            },
          );

          targets.forEach((target) => {
            if (target instanceof HTMLElement) {
              observer.observe(target);
            }
          });
        });
      </script>
    ) : null}
  </section>
) : null}
