---
import type { ServicesListContent, ServicesListItem } from '../../../types/content';

interface Props {
  services: ServicesListContent;
  title?: string;
  intro?: string;
  backgroundClass?: string;
  backgroundTone?: string;
  backgroundStyle?: string;
  mode?: 'teaser' | 'detailed';
  itemHrefFallback?: string | null;
  animationEnabled?: boolean;
}

const {
  services,
  title = 'Our Services',
  intro = 'Support tailored to your needs.',
  backgroundClass,
  backgroundTone,
  backgroundStyle,
  mode = 'teaser',
  itemHrefFallback,
  animationEnabled = true,
}: Props = Astro.props as Props;

const items = Array.isArray(services.items) ? services.items : [];
const sectionClasses = [backgroundClass, 'section-shell'].filter(Boolean).join(' ');
const safeHref = typeof itemHrefFallback === 'string' && itemHrefFallback.length > 0 ? itemHrefFallback : undefined;
const isDetailed = mode === 'detailed';
const shouldAnimate = animationEnabled !== false;
const cardAnimationClasses = shouldAnimate
  ? 'motion-safe:translate-y-6 motion-safe:opacity-0 motion-safe:transition-all motion-safe:duration-[1000ms] motion-safe:ease-out data-[visible=true]:motion-safe:translate-y-0 data-[visible=true]:motion-safe:opacity-100'
  : '';
const makeSummary = (item: ServicesListItem) => item.summary ?? item.blurb ?? '';
const makeMeta = (item: ServicesListItem) =>
  [
    item.duration && { label: item.duration },
    item.startingPrice && { label: item.startingPrice },
  ].filter(Boolean) as Array<{ label: string }>;
const resolveHref = (item: ServicesListItem) => {
  const explicit = item.link?.href?.trim();
  if (explicit) return explicit;
  return isDetailed ? undefined : safeHref ?? '/services';
};
const resolveLinkLabel = (item: ServicesListItem) => item.link?.label?.trim();
---
<section
  id="services"
  class={sectionClasses}
  data-background-tone={backgroundTone ?? undefined}
  style={backgroundStyle}
  data-services-grid-root={shouldAnimate ? '' : undefined}
>
  <div class="section-container max-w-5xl">
    <div class="section-intro max-w-2xl">
      <h2 class="section-heading">{title}</h2>
      <p class="section-subtitle">{intro}</p>
    </div>
    <div class="mt-12 grid gap-6 sm:grid-cols-2 lg:grid-cols-3">
      {items.map((item, index) => {
        const href = resolveHref(item);
        const summary = makeSummary(item);
        const features = Array.isArray(item.features) ? item.features : [];
        const meta = makeMeta(item);
        const linkLabel = resolveLinkLabel(item);
        const content = (
          <div class="flex h-full flex-col gap-4">
            <div class="flex items-start justify-between gap-4">
              <div>
                {item.title && <h3 class="text-lg font-semibold text-slate-900">{item.title}</h3>}
                {summary && <p class="mt-2 text-sm leading-relaxed text-slate-600">{summary}</p>}
              </div>
              {item.icon && (
                <span class="text-2xl" aria-hidden="true">{item.icon}</span>
              )}
            </div>
            {isDetailed && features.length > 0 && (
              <ul class="mt-1 space-y-2 text-sm text-slate-600">
                {features.map((feature) => (
                  <li class="flex items-start gap-2">
                    <span class="mt-1 inline-block h-1.5 w-1.5 flex-none rounded-full bg-brand-primary/50"></span>
                    <span class="leading-relaxed">{feature}</span>
                  </li>
                ))}
              </ul>
            )}
            {isDetailed && meta.length > 0 && (
              <div class="flex flex-wrap gap-2">
                {meta.map(({ label }) => (
                  <span class="inline-flex items-center rounded-full bg-slate-100 px-3 py-1 text-xs font-medium text-slate-600">
                    {label}
                  </span>
                ))}
              </div>
            )}
            {isDetailed && (href || linkLabel) && (
              <div class="mt-auto pt-2">
                <a
                  href={href ?? '#'}
                  class="inline-flex items-center gap-2 text-sm font-semibold text-brand-primary transition hover:text-brand-primary/80"
                >
                  {linkLabel ?? 'Learn more'}
                  <span aria-hidden="true">â†’</span>
                </a>
              </div>
            )}
          </div>
        );

        return href && !isDetailed ? (
          <a
            href={href}
            class={`surface-card surface-card-interactive flex h-full flex-col p-6 sm:p-7 ${cardAnimationClasses}`}
            data-services-grid-card
            style={shouldAnimate ? `transition-delay: ${120 + index * 60}ms;` : undefined}
          >
            {content}
          </a>
        ) : (
          <div
            class={`surface-card flex h-full flex-col p-6 sm:p-7 ${cardAnimationClasses}`}
            data-services-grid-card
            style={shouldAnimate ? `transition-delay: ${120 + index * 60}ms;` : undefined}
          >
            {content}
          </div>
        );
      })}
    </div>
  </div>
  {shouldAnimate ? (
    <script>
      const roots = Array.from(document.querySelectorAll('[data-services-grid-root]'));
      const supportMatchMedia = typeof window !== 'undefined' && typeof window.matchMedia === 'function';
      const prefersReducedMotion = supportMatchMedia
        ? window.matchMedia('(prefers-reduced-motion: reduce)').matches
        : false;
      const reveal = (el) => {
        if (el instanceof HTMLElement) {
          el.dataset.visible = 'true';
        }
      };

      roots.forEach((root) => {
        if (!(root instanceof HTMLElement)) return;
        if (root.dataset.servicesGridAnimated === 'true') return;

        const cards = Array.from(root.querySelectorAll('[data-services-grid-card]'));
        if (cards.length === 0) return;

        root.dataset.servicesGridAnimated = 'true';

        if (prefersReducedMotion || !('IntersectionObserver' in window)) {
          cards.forEach((card) => reveal(card));
          return;
        }

        const observer = new IntersectionObserver(
          (entries, obs) => {
            entries.forEach((entry) => {
              if (entry.isIntersecting) {
                reveal(entry.target);
                obs.unobserve(entry.target);
              }
            });
          },
          {
            rootMargin: '0px 0px -10% 0px',
            threshold: 0.15,
          },
        );

        cards.forEach((card) => {
          if (card instanceof HTMLElement) {
            observer.observe(card);
          }
        });
      });
    </script>
  ) : null}
</section>
