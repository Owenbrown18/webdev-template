---
import type { ServicesContent } from '../../../types/content';

interface Props {
  services: ServicesContent;
  title?: string;
  intro?: string;
  eyebrow?: string;
  backgroundClass?: string;
  animationEnabled?: boolean;
  backgroundTone?: string;
  backgroundStyle?: string;
}

const {
  services,
  title = 'Our Services',
  intro = 'Support tailored to your needs.',
  eyebrow = 'What we do',
  backgroundClass,
  animationEnabled = true,
  backgroundTone,
  backgroundStyle,
}: Props = Astro.props as Props;

const items = Array.isArray(services.items) ? services.items : [];
const sectionClasses = [backgroundClass, 'section-shell'].filter(Boolean).join(' ');
const shouldAnimate = animationEnabled !== false;
const animationClasses = shouldAnimate
  ? 'motion-safe:translate-y-6 motion-safe:opacity-0 motion-safe:transition-all motion-safe:duration-[1400ms] motion-safe:ease-out data-[visible=true]:motion-safe:translate-y-0 data-[visible=true]:motion-safe:opacity-100'
  : '';
const cardClasses = [
  'surface-card surface-card-interactive block p-6 sm:p-7',
  animationClasses,
]
  .filter(Boolean)
  .join(' ');
---
<section
  id="services"
  class={sectionClasses}
  data-background-tone={backgroundTone ?? undefined}
  style={backgroundStyle}
  data-services-root={shouldAnimate ? '' : undefined}
>
  <div class="section-container max-w-4xl">
    <div class="section-intro">
      {eyebrow && <p class="section-eyebrow">{eyebrow}</p>}
      <h2 class="section-heading">{title}</h2>
      <p class="section-subtitle">{intro}</p>
    </div>
    <div class="mt-12 space-y-6">
      {items.map(({ title, blurb }) => (
        <a
          href="/services"
          data-service-card
          class={cardClasses}
        >
          <h3 class="text-lg font-semibold text-slate-900">{title}</h3>
          <p class="mt-3 text-sm leading-relaxed text-slate-600">{blurb}</p>
        </a>
      ))}
    </div>
  </div>
  {shouldAnimate ? (
    <script>
      const roots = Array.from(document.querySelectorAll('[data-services-root]'));
      const supportMatchMedia = typeof window !== 'undefined' && typeof window.matchMedia === 'function';
      const prefersReducedMotion = supportMatchMedia
        ? window.matchMedia('(prefers-reduced-motion: reduce)').matches
        : false;
      const reveal = (el: Element | null) => {
        if (el instanceof HTMLElement) {
          el.dataset.visible = 'true';
        }
      };

      roots.forEach((root) => {
        const cards = Array.from(root.querySelectorAll('[data-service-card]'));
        if (cards.length === 0) return;

        if (!prefersReducedMotion && 'IntersectionObserver' in window) {
          const observer = new IntersectionObserver(
            (entries, obs) => {
              entries.forEach((entry) => {
                if (entry.isIntersecting) {
                  const element = entry.target;
                  reveal(element);
                  obs.unobserve(element);
                }
              });
            },
            {
              rootMargin: '0px 0px -10% 0px',
              threshold: 0.1,
            },
          );

          cards.forEach((card) => observer.observe(card));
        } else {
          cards.forEach((card) => reveal(card));
        }
      });
    </script>
  ) : null}
</section>
