---
import type { SiteContent } from '../../../types/content';

interface Props {
  site: SiteContent;
  video?: {
    videoUrl?: string | null;
    localVideo?: string | null;
    posterUrl?: string | null;
    caption?: string | null;
  };
  eyebrow?: string;
  title?: string;
  intro?: string;
  backgroundClass?: string;
  animationEnabled?: boolean;
  backgroundTone?: string;
  backgroundStyle?: string;
}

const {
  site,
  video = {},
  eyebrow = 'See us in action',
  title = `${site.name} in motion`,
  intro = '',
  backgroundClass,
  animationEnabled = true,
  backgroundTone,
  backgroundStyle,
}: Props = Astro.props as Props;
const videoUrl = video.videoUrl ?? '';
const localVideo = video.localVideo ?? '';
const caption = video.caption ?? 'See our team in action.';
const posterUrl = video.posterUrl ?? '';
const useLocalVideo = Boolean(localVideo);
const hasEmbed = Boolean(videoUrl);
const shouldRender = useLocalVideo || hasEmbed;
const sectionClasses = [backgroundClass, 'section-shell'].filter(Boolean).join(' ');
const shouldAnimate = animationEnabled !== false;
const figureClasses = [
  'surface-card overflow-hidden',
  shouldAnimate
    ? 'motion-safe:opacity-0 motion-safe:translate-y-6 motion-safe:transition-all motion-safe:duration-[1400ms] motion-safe:ease-out data-[visible=true]:motion-safe:opacity-100 data-[visible=true]:motion-safe:translate-y-0'
    : '',
]
  .filter(Boolean)
  .join(' ');
---
{shouldRender && (
  <section
    class={sectionClasses}
    data-background-tone={backgroundTone ?? undefined}
    style={backgroundStyle}
    data-video-root={shouldAnimate ? '' : undefined}
  >
    <div class="section-container max-w-6xl">
      {(eyebrow || title || intro) && (
        <div class="section-intro max-w-3xl pb-10">
          {eyebrow && <p class="section-eyebrow">{eyebrow}</p>}
          {title && <h2 class="section-heading">{title}</h2>}
          {intro && <p class="section-subtitle">{intro}</p>}
        </div>
      )}
      <figure class={figureClasses} data-video-card>
        <div class="relative aspect-[16/7] w-full bg-slate-900">
          {useLocalVideo ? (
            <video
              src={localVideo}
              poster={posterUrl || undefined}
              autoplay
              muted
              loop
              playsinline
              class="absolute inset-0 h-full w-full object-cover"
            ></video>
          ) : (
            <iframe
              src={videoUrl}
              title={`Video from ${site.name}`}
              allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture"
              allowfullscreen
              loading="lazy"
              class="absolute inset-0 h-full w-full"
            ></iframe>
          )}
        </div>
        {caption && <figcaption class="px-8 py-6 text-sm text-slate-600">{caption}</figcaption>}
      </figure>
    </div>
    {shouldAnimate ? (
      <script>
        const roots = Array.from(document.querySelectorAll('[data-video-root]'));
        const supportMatchMedia = typeof window !== 'undefined' && typeof window.matchMedia === 'function';
        const prefersReducedMotion = supportMatchMedia
          ? window.matchMedia('(prefers-reduced-motion: reduce)').matches
          : false;
        const reveal = (el: Element | null) => {
          if (el instanceof HTMLElement) {
            el.dataset.visible = 'true';
          }
        };

        roots.forEach((root) => {
          if (!(root instanceof HTMLElement)) {
            return;
          }

          const cards = Array.from(root.querySelectorAll('[data-video-card]'));
          if (cards.length === 0) {
            return;
          }

          if (prefersReducedMotion || !('IntersectionObserver' in window)) {
            cards.forEach((card) => reveal(card));
            return;
          }

          const observer = new IntersectionObserver(
            (entries, obs) => {
              entries.forEach((entry) => {
                if (entry.isIntersecting) {
                  const element = entry.target;
                  reveal(element);
                  obs.unobserve(element);
                }
              });
            },
            {
              rootMargin: '0px 0px -10% 0px',
              threshold: 0.1,
            },
          );

          cards.forEach((card) => observer.observe(card));
        });
      </script>
    ) : null}
  </section>
)}
