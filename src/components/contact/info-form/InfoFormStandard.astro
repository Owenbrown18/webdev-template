---
import type { SiteContent } from '../../../types/content';

interface Props {
  site: SiteContent;
  eyebrow?: string;
  title?: string;
  intro?: string;
  phoneLabel?: string | null;
  emailLabel?: string | null;
  backgroundClass?: string;
  backgroundTone?: string;
  backgroundStyle?: string;
  animationEnabled?: boolean;
}

const props = Astro.props as Props & Record<string, any>;
const {
  site,
  title = "Let's work together",
  intro = "Reach us by phone or email, or send details through the form. We're quick to respond.",
  eyebrow,
  phoneLabel,
  emailLabel,
  backgroundClass,
  backgroundTone,
  backgroundStyle,
  animationEnabled = true,
  ...restProps
} = props;

const hours = Array.isArray(site.hours) ? site.hours : [];
const phoneDigits = site.phone ? site.phone.replace(/[^\d+]/g, '') : '';
const phoneHref = phoneDigits ? `tel:${phoneDigits}` : '';
const emailHref = site.email ? `mailto:${site.email}` : '';
const addressParts = [
  site.address?.line1,
  site.address?.line2,
  [site.address?.city, site.address?.state].filter(Boolean).join(', '),
  site.address?.postalCode,
]
  .filter((part) => Boolean(part && part.trim?.()))
  .map((part) => (typeof part === 'string' ? part.trim() : part));
const addressDisplay = addressParts.join('\n');
const sectionClasses = [backgroundClass, 'section-shell'].filter(Boolean).join(' ');
const shouldAnimate = animationEnabled !== false;
const containerClasses = 'section-container max-w-5xl';
const infoCardClasses = [
  'surface-card surface-card-static p-8 sm:p-12 mx-auto',
  shouldAnimate
    ? 'motion-safe:opacity-0 motion-safe:translate-y-6 motion-safe:transition-all motion-safe:duration-[900ms] motion-safe:ease-out data-[visible=true]:motion-safe:opacity-100 data-[visible=true]:motion-safe:translate-y-0'
    : '',
]
  .filter(Boolean)
  .join(' ');
const hasEyebrow = typeof eyebrow === 'string' && eyebrow.trim().length > 0;
const hasTitle = typeof title === 'string' && title.trim().length > 0;
const hasIntro = typeof intro === 'string' && intro.trim().length > 0;
---
<section
  class={sectionClasses}
  data-background-tone={backgroundTone ?? undefined}
  style={backgroundStyle}
  data-contact-info-root={shouldAnimate ? 'true' : undefined}
  {...restProps}
>
  {(hasEyebrow || hasTitle || hasIntro) && (
    <div class="section-intro mx-auto max-w-3xl text-center">
      {hasEyebrow && <p class="section-eyebrow">{eyebrow}</p>}
      {hasTitle && <h2 class="section-heading">{title}</h2>}
      {hasIntro && <p class="section-subtitle">{intro}</p>}
    </div>
  )}
  <div class={containerClasses} data-contact-info-container>
    <article class={infoCardClasses} data-contact-info-card>
      <dl class="space-y-6 text-sm text-slate-700">
        {(site.phone || site.email) && (
          <div class="grid gap-4 sm:grid-cols-2">
            {site.phone && (
              <div>
                <dt class="font-semibold text-slate-900">Phone</dt>
                <dd class="mt-1 text-base text-slate-700">
                  <a href={phoneHref} class="text-brand-primary hover:underline">
                    {phoneLabel ?? site.phone}
                  </a>
                </dd>
              </div>
            )}
            {site.email && (
              <div>
                <dt class="font-semibold text-slate-900">Email</dt>
                <dd class="mt-1 text-base text-slate-700">
                  <a href={emailHref} class="text-brand-primary hover:underline">
                    {emailLabel ?? site.email}
                  </a>
                </dd>
              </div>
            )}
          </div>
        )}
        {addressDisplay && (
          <div>
            <dt class="font-semibold text-slate-900">Visit</dt>
            <dd class="mt-1 whitespace-pre-line">{addressDisplay}</dd>
          </div>
        )}
        {hours.length > 0 && (
          <div>
            <dt class="font-semibold text-slate-900">Hours</dt>
            <dd class="mt-2 space-y-2">
              {hours.map(({ label, open, close }) => (
                <div class="flex justify-between text-sm">
                  <span>{label}</span>
                  <span>{open}{close ? ` â€“ ${close}` : ''}</span>
                </div>
              ))}
            </dd>
          </div>
        )}
      </dl>
    </article>
  </div>
</section>

{shouldAnimate ? (
  <script>
    const roots = Array.from(document.querySelectorAll('[data-contact-info-root="true"]'));
    const supportMatchMedia = typeof window !== 'undefined' && typeof window.matchMedia === 'function';
    const prefersReducedMotion = supportMatchMedia
      ? window.matchMedia('(prefers-reduced-motion: reduce)').matches
      : false;
    const reveal = (el: Element | null) => {
      if (el instanceof HTMLElement) {
        el.dataset.visible = 'true';
      }
    };

    roots.forEach((root) => {
      if (!(root instanceof HTMLElement)) return;
      if (root.dataset.contactInfoAnimated === 'true') return;

      root.dataset.contactInfoAnimated = 'true';
      const targets = Array.from(root.querySelectorAll('[data-contact-info-card]'));

      if (targets.length === 0) return;

      if (prefersReducedMotion || !('IntersectionObserver' in window)) {
        targets.forEach((target) => reveal(target));
        return;
      }

      const observer = new IntersectionObserver(
        (entries, obs) => {
          entries.forEach((entry) => {
            if (entry.isIntersecting) {
              reveal(entry.target);
              obs.unobserve(entry.target);
            }
          });
        },
        {
          rootMargin: '0px 0px -10% 0px',
          threshold: 0.1,
        },
      );

      targets.forEach((target) => observer.observe(target));
    });
  </script>
) : null}
