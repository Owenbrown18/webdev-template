---
import {
  site,
  contact,
  getContactHeroVariant,
  getContactHeroBackgroundTone,
  isContactHeroAnimationEnabled,
} from '../../../config/content';
import {
  normalizeBackgroundTone,
  normalizeBackgroundColor,
  sectionBackgroundClass,
  sectionBackgroundToneAttr,
  createBackgroundStyle,
} from '../../../utils/background';
import type { SiteContent } from '../../../types/content';
import HeroClassic from '../../home/hero/HeroClassic.astro';
import HeroSplit from '../../home/hero/HeroSplit.astro';
import HeroFullscreen from '../../home/hero/HeroFullscreen.astro';

const variants: Record<string, any> = {
  classic: HeroClassic,
  split: HeroSplit,
  fullscreen: HeroFullscreen,
};

const settings = contact.hero ?? {};
const props = (Astro.props ?? {}) as Record<string, any>;
const variantValue = props.variant ?? settings.variant;
const variantOverride =
  typeof variantValue === 'string' ? variantValue.trim().toLowerCase() : undefined;

const {
  backgroundTone: overrideTone,
  backgroundColor: overrideColor,
  backgroundClass: overrideClass,
  animation: animationOverride,
  hero: heroOverride,
  ...restProps
} = props;

if ('variant' in restProps) {
  delete restProps.variant;
}

const variantKey = variantOverride ?? getContactHeroVariant();
const HeroComponent = variantKey === 'none' ? null : variants[variantKey] ?? variants.classic;
const hero = (heroOverride ?? settings) as typeof settings;
const fallbackTone = getContactHeroBackgroundTone();
const normalizedTone = normalizeBackgroundTone(overrideTone ?? hero?.background?.tone ?? fallbackTone);
const backgroundClass = overrideClass ?? sectionBackgroundClass(normalizedTone);
const backgroundToneAttr = sectionBackgroundToneAttr(normalizedTone);
const backgroundColor = normalizeBackgroundColor(overrideColor ?? hero?.background?.color);
const backgroundStyle = createBackgroundStyle(backgroundColor, normalizedTone);
const animationSetting =
  animationOverride !== undefined ? animationOverride : hero?.animation;
const animationEnabled =
  animationSetting ?? isContactHeroAnimationEnabled();
---
{HeroComponent ? (
  <HeroComponent
    site={site as SiteContent}
    hero={hero}
    backgroundClass={backgroundClass}
    backgroundTone={backgroundToneAttr}
    backgroundStyle={backgroundStyle}
    animationEnabled={animationEnabled !== false}
    {...restProps}
  />
) : null}
