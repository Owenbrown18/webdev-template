---
interface DetailItem {
  label?: string | null;
  value?: string | null;
}

interface CtaConfig {
  label?: string | null;
  href?: string | null;
}

interface Props {
  tagLabel?: string | null;
  title?: string | null;
  subtitle?: string | null;
  primaryCta?: CtaConfig | null;
  secondaryCta?: CtaConfig | null;
  image?: string | null;
  heroImageAlt?: string | null;
  details?: DetailItem[] | null;
  backgroundClass?: string;
  backgroundTone?: string;
  backgroundStyle?: string;
  animationEnabled?: boolean;
}

const {
  tagLabel = 'Services',
  title = 'Tailored solutions for every engagement',
  subtitle =
    'Partner with a team that understands the details, communicates clearly, and delivers lasting results for your property.',
  primaryCta,
  secondaryCta,
  image = '/images/about-hero.jpg',
  heroImageAlt,
  details = [],
  backgroundClass,
  backgroundTone,
  backgroundStyle,
  animationEnabled = true,
}: Props = Astro.props as Props;

const filteredDetails = (Array.isArray(details) ? details : []).filter(
  (detail): detail is { label: string; value: string } =>
    Boolean(detail?.label?.trim()) && Boolean(detail?.value?.trim()),
);

const safePrimaryCta =
  primaryCta && primaryCta.label && primaryCta.href
    ? { label: primaryCta.label, href: primaryCta.href }
    : null;
const safeSecondaryCta =
  secondaryCta && secondaryCta.label && secondaryCta.href
    ? { label: secondaryCta.label, href: secondaryCta.href }
    : null;

const shouldAnimate = animationEnabled !== false;
const isAuroraBackground = backgroundTone === 'aurora';
const sectionClasses = [
  backgroundClass,
  'full-bleed',
  'section-shell',
  'min-h-hero',
  'relative',
  'isolate',
  'overflow-hidden',
  'rounded-3xl',
  isAuroraBackground ? '' : 'bg-slate-900',
  'text-white',
  'shadow-xl',
]
  .filter(Boolean)
  .join(' ');
const textClasses = [
  'max-w-2xl space-y-6',
  shouldAnimate
    ? 'motion-safe:opacity-0 motion-safe:translate-y-6 motion-safe:transition-all motion-safe:duration-[900ms] motion-safe:ease-out data-[visible=true]:motion-safe:opacity-100 data-[visible=true]:motion-safe:translate-y-0'
    : '',
]
  .filter(Boolean)
  .join(' ');
const showImageLayer = !isAuroraBackground && typeof image === 'string' && image.trim().length > 0;
const imageWrapperClasses = showImageLayer
  ? [
      'absolute inset-0',
      shouldAnimate
        ? 'motion-safe:scale-[1.04] motion-safe:transition-transform motion-safe:duration-[1400ms] motion-safe:ease-out data-[visible=true]:motion-safe:scale-100'
        : '',
    ]
      .filter(Boolean)
      .join(' ')
  : undefined;
---
{title || subtitle ? (
  <section
    class={sectionClasses}
    data-background-tone={backgroundTone ?? undefined}
    style={backgroundStyle}
    data-hero-root
    data-animate={shouldAnimate ? 'true' : undefined}
  >
    {showImageLayer ? (
      <div class={imageWrapperClasses} data-hero-image>
        {image ? (
          <img
            src={image}
            alt={heroImageAlt ?? ''}
            class="absolute inset-0 h-full w-full object-cover"
            loading="lazy"
            decoding="async"
          />
        ) : null}
        <div class="absolute inset-0 bg-slate-900/70" aria-hidden="true"></div>
      </div>
    ) : null}
    <div class="section-container relative py-24 sm:py-28">
      <div class="mx-auto grid max-w-5xl gap-12 sm:grid-cols-[minmax(0,1.2fr)_minmax(0,0.8fr)] sm:items-center">
        <div class={textClasses} data-hero-text>
          {tagLabel && (
            <p class="text-sm font-semibold uppercase tracking-[0.28em] text-white/70">{tagLabel}</p>
          )}
          {title && <h1 class="text-4xl font-semibold tracking-tight sm:text-5xl">{title}</h1>}
          {subtitle && <p class="text-base leading-relaxed text-white/80">{subtitle}</p>}
          {(safePrimaryCta || safeSecondaryCta) && (
            <div class="flex flex-wrap gap-3">
              {safePrimaryCta && (
                <a
                  href={safePrimaryCta.href}
                  class="inline-flex items-center justify-center rounded-full bg-white px-6 py-3 text-base font-semibold text-slate-900 shadow-lg transition hover:bg-slate-100"
                >
                  {safePrimaryCta.label}
                </a>
              )}
              {safeSecondaryCta && (
                <a
                  href={safeSecondaryCta.href}
                  class="inline-flex items-center justify-center rounded-full border border-white/50 px-6 py-3 text-base font-semibold text-white transition hover:border-white hover:bg-white/10"
                >
                  {safeSecondaryCta.label}
                </a>
              )}
            </div>
          )}
        </div>
        {filteredDetails.length > 0 && (
          <dl class="space-y-4">
            {filteredDetails.map(({ label, value }) => (
              <div class="rounded-2xl border border-white/15 bg-white/5 p-6 text-center shadow-sm backdrop-blur">
                <dt class="text-sm font-semibold uppercase tracking-[0.22em] text-white/70">{label}</dt>
                <dd class="mt-2 text-2xl font-semibold text-white">{value}</dd>
              </div>
            ))}
          </dl>
        )}
      </div>
    </div>
    {shouldAnimate ? (
      <script>
        const roots = Array.from(document.querySelectorAll('[data-hero-root][data-animate="true"]'));
        const supportMatchMedia = typeof window !== 'undefined' && typeof window.matchMedia === 'function';
        const prefersReducedMotion = supportMatchMedia
          ? window.matchMedia('(prefers-reduced-motion: reduce)').matches
          : false;
        const reveal = (el: Element | null) => {
          if (el instanceof HTMLElement) {
            el.dataset.visible = 'true';
          }
        };

        roots.forEach((root) => {
          if (!(root instanceof HTMLElement)) {
            return;
          }

          if (root.dataset.heroAnimated === 'true') {
            return;
          }

          root.dataset.heroAnimated = 'true';
          const text = root.querySelector('[data-hero-text]');
          const image = root.querySelector('[data-hero-image]');

          if (prefersReducedMotion) {
            reveal(text);
            reveal(image);
            return;
          }

          requestAnimationFrame(() => {
            requestAnimationFrame(() => {
              reveal(text);
              reveal(image);
            });
          });
        });
      </script>
    ) : null}
  </section>
) : null}
