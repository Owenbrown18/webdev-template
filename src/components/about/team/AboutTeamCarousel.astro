---
interface Member {
  name?: string;
  role?: string;
  bio?: string;
  image?: string;
  highlight?: string;
}

interface Props {
  title: string;
  intro?: string;
  eyebrow?: string;
  members: Member[];
  backgroundClass?: string;
  backgroundTone?: string;
  backgroundStyle?: string;
  fadeColor?: string;
}

const {
  title,
  intro,
  eyebrow,
  members,
  backgroundClass,
  backgroundTone,
  backgroundStyle,
  fadeColor,
}: Props = Astro.props as Props;

const teamMembers = Array.isArray(members) ? members.filter(Boolean) : [];

const sectionClasses = ['section-shell', backgroundClass ?? ''].filter(Boolean).join(' ');
const fallbackFadeColor = 'rgb(var(--surface-base-rgb))';
const resolvedFadeColor =
  typeof fadeColor === 'string' && fadeColor.trim().length > 0 ? fadeColor.trim() : fallbackFadeColor;
const sectionStyleParts = [backgroundStyle, `--team-carousel-fade-color: ${resolvedFadeColor}`].filter(Boolean);
const sectionStyle = sectionStyleParts.length > 0 ? sectionStyleParts.join('; ') : undefined;
---
<section
  class={sectionClasses}
  data-background-tone={backgroundTone ?? undefined}
  style={sectionStyle}
  data-team-carousel
>
  <div class="section-container max-w-5xl">
    <div class="section-intro mx-auto max-w-5xl">
      {eyebrow && <p class="section-eyebrow">{eyebrow}</p>}
      <h2 class="section-heading">{title}</h2>
      {intro && <p class="section-subtitle leading-7">{intro}</p>}
    </div>
    <div class="team-carousel-shell">
      <div class="team-carousel-viewport" data-carousel-viewport>
        <div
          class="team-carousel-track"
          data-carousel-track
          role="group"
          aria-roledescription="carousel"
          aria-label="Team members"
        >
          {teamMembers.map(({ name, role, bio, image, highlight }) => (
            <article class="team-carousel-card surface-card surface-card-static flex h-full min-h-[20rem] flex-col p-5" data-carousel-card>
              <div class="relative">
                <div class="aspect-[3/4] w-full overflow-hidden rounded-xl bg-slate-100 shadow-inner">
                  {image ? (
                    <img
                      src={image}
                      alt={name ? `${name} headshot` : ''}
                      class="h-full w-full object-cover"
                      loading="lazy"
                      decoding="async"
                    />
                  ) : (
                    <div class="flex h-full w-full items-center justify-center bg-gradient-to-br from-slate-200 via-white to-slate-100 text-3xl font-semibold text-slate-400">
                      {name
                        ?.split(' ')
                        .map((part) => part[0])
                        .filter(Boolean)
                        .slice(0, 2)
                        .join('') ?? 'NB'}
                    </div>
                  )}
                </div>
                {highlight && (
                  <span class="absolute bottom-4 left-4 inline-flex rounded-full bg-brand-primary/90 px-3 py-1 text-xs font-semibold uppercase tracking-wide text-white">
                    {highlight}
                  </span>
                )}
              </div>
              <div class="mt-5 space-y-2">
                <div>
                  <h3 class="text-lg font-semibold text-slate-900">{name}</h3>
                  {role && <p class="text-sm font-medium text-brand-primary/80">{role}</p>}
                </div>
                {bio && <p class="text-sm leading-6 text-slate-600 line-clamp-4">{bio}</p>}
              </div>
            </article>
          ))}
        </div>
      </div>
    </div>
  </div>
</section>
<script type="module">
  (() => {
    const SPEED = 0.03;

    const getSlidesPerView = (total) => {
      if (window.matchMedia('(min-width: 1024px)').matches) {
        return Math.min(3, total);
      }
      if (window.matchMedia('(min-width: 640px)').matches) {
        return Math.min(2, total);
      }
      return 1;
    };

    const debounce = (fn, wait = 150) => {
      let timer;
      return () => {
        window.clearTimeout(timer);
        timer = window.setTimeout(fn, wait);
      };
    };

    const initCarousel = (container) => {
      if (container.dataset.carouselReady === 'true') return;
      container.dataset.carouselReady = 'true';

      const viewport = container.querySelector('[data-carousel-viewport]');
      const track = container.querySelector('[data-carousel-track]');
      if (!viewport || !track) return;

      const originals = Array.from(track.querySelectorAll('[data-carousel-card]'));
      const baseCount = originals.length;
      if (baseCount <= 1) {
        track.style.setProperty('--slides-per-view', '1');
        return;
      }

      track.querySelectorAll('[data-carousel-clone]').forEach((node) => node.remove());

      const clonesNeeded = Math.max(2, getSlidesPerView(baseCount) + 2);
      for (let i = 0; i < clonesNeeded; i += 1) {
        const clone = originals[i % baseCount].cloneNode(true);
        clone.dataset.carouselClone = 'true';
        track.appendChild(clone);
      }

      let slidesPerView = getSlidesPerView(baseCount);
      let gap = parseFloat(window.getComputedStyle(track).gap || '0');
      const measureItemWidth = () => {
        const first = track.querySelector('[data-carousel-card]');
        return first ? first.getBoundingClientRect().width + gap : 0;
      };

      let itemWidth = measureItemWidth();
      let position = 0;
      let lastTime;
      let isInView = false;

      const updateMeasurements = (immediate = false) => {
        slidesPerView = getSlidesPerView(baseCount);
        track.style.setProperty('--slides-per-view', String(slidesPerView));
        gap = parseFloat(window.getComputedStyle(track).gap || '0');
        itemWidth = measureItemWidth();
        if (immediate) {
          track.style.transform = 'translateX(' + (-position) + 'px)';
        }
      };

      const step = (timestamp) => {
        if (!lastTime) lastTime = timestamp;
        const delta = timestamp - lastTime;
        lastTime = timestamp;

        if (isInView && document.visibilityState === 'visible' && itemWidth > 0) {
          position += delta * SPEED;
          while (position >= itemWidth) {
            position -= itemWidth;
            const first = track.firstElementChild;
            if (first) track.appendChild(first);
          }
          track.style.transform = 'translateX(' + (-position) + 'px)';
        }

        requestAnimationFrame(step);
      };

      const observer = new IntersectionObserver(
        (entries) => {
          isInView = entries.some((entry) => entry.isIntersecting);
          if (!isInView) {
            lastTime = undefined;
          }
        },
        { threshold: 0.3 },
      );

      observer.observe(container);

      document.addEventListener('visibilitychange', () => {
        if (document.visibilityState !== 'visible') {
          lastTime = undefined;
        }
      });

      container.addEventListener('mouseenter', () => {
        lastTime = undefined;
      });

      container.addEventListener('mouseleave', () => {
        lastTime = undefined;
      });

      const handleResize = debounce(() => updateMeasurements(true));
      window.addEventListener('resize', handleResize);

      updateMeasurements(true);
      track.style.transform = 'translateX(' + (-position) + 'px)';
      requestAnimationFrame(step);

      container.addEventListener('astro:before-remove', () => {
        observer.disconnect();
        window.removeEventListener('resize', handleResize);
      });
    };

    const initAllCarousels = () => {
      document.querySelectorAll('[data-team-carousel]').forEach((el) => initCarousel(el));
    };

    if (document.readyState === 'loading') {
      document.addEventListener('DOMContentLoaded', initAllCarousels, { once: true });
    } else {
      initAllCarousels();
    }
  })();
</script>
<style>
  [data-carousel-track] {
    --slides-per-view: 1;
    display: flex;
    gap: 1rem;
    will-change: transform;
  }

  .team-carousel-shell {
    margin-top: clamp(2rem, 5vw, 2.75rem);
    position: relative;
    border-radius: clamp(2.25rem, 5vw, 3rem);
    padding: clamp(1.25rem, 3vw, 2.25rem);
    background: linear-gradient(
      to bottom,
      rgba(255, 255, 255, 0.98) 0%,
      rgba(255, 255, 255, 0.94) 48%,
      rgba(255, 255, 255, 0.9) 100%
    );
    box-shadow:
      0 26px 60px -40px rgba(15, 23, 42, 0.32),
      0 18px 36px -42px rgba(15, 23, 42, 0.18);
    overflow: hidden;
    mask-image: linear-gradient(to right, transparent 0%, black 12%, black 88%, transparent 100%);
    -webkit-mask-image: linear-gradient(to right, transparent 0%, black 12%, black 88%, transparent 100%);
  }

  .team-carousel-shell::before {
    content: '';
    position: absolute;
    inset: -12% -18% calc(68% * -1) -18%;
    background:
      radial-gradient(120% 80% at 50% 0%, rgba(255, 255, 255, 0.85), rgba(255, 255, 255, 0) 70%);
    pointer-events: none;
    opacity: 0.85;
  }

  .team-carousel-viewport {
    overflow: hidden;
    position: relative;
    border-radius: clamp(1.75rem, 4vw, 2.5rem);
    background: rgba(255, 255, 255, 0.96);
    --team-carousel-fade-base: var(--team-carousel-fade-color, rgba(248, 250, 252, 1));
    --team-carousel-fade-edge: var(--section-background-edge, var(--team-carousel-fade-base));
    --team-carousel-fade-highlight: var(--section-background-top, var(--team-carousel-fade-base));
    --team-carousel-fade-mid: color-mix(in srgb, var(--team-carousel-fade-edge) 62%, transparent);
    --team-carousel-fade-soft: color-mix(in srgb, var(--team-carousel-fade-highlight) 54%, transparent);
  }

  .team-carousel-card {
    flex: 0 0 calc(78% / var(--slides-per-view));
    max-width: calc(78% / var(--slides-per-view));
    min-height: 21rem;
    border: none;
    box-shadow:
      0 18px 38px -30px rgba(15, 23, 42, 0.22),
      0 10px 28px -32px rgba(15, 23, 42, 0.14);
  }

</style>
