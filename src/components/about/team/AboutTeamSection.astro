---
import { about, getAboutTeamVariant, getAboutTeamBackgroundTone } from '../../../config/content';
import {
  normalizeBackgroundTone,
  normalizeBackgroundColor,
  sectionBackgroundClass,
  sectionBackgroundToneAttr,
  createBackgroundStyle,
} from '../../../utils/background';
import AboutTeamGrid from './AboutTeamGrid.astro';
import AboutTeamList from './AboutTeamList.astro';
import AboutTeamCarousel from './AboutTeamCarousel.astro';

const variants: Record<string, any> = {
  grid: AboutTeamGrid,
  list: AboutTeamList,
  carousel: AboutTeamCarousel,
};

const variantKey = getAboutTeamVariant();
const Component = variantKey === 'none' ? null : variants[variantKey] ?? variants.grid;

const props = (Astro.props ?? {}) as Record<string, any>;

const base = about.team ?? {};
const title = props.title ?? base.title ?? 'Meet the neighbors behind the work';
const intro = props.intro ?? base.intro ?? 'A team of specialists committed to dependable craftsmanship and clear communication.';
const eyebrow = props.eyebrow ?? base.eyebrow;
const rawMembers = Array.isArray(props.members) ? props.members : base.members;
const members = Array.isArray(rawMembers) ? rawMembers.filter(Boolean) : [];
const fallbackTone = getAboutTeamBackgroundTone();
const backgroundTone = normalizeBackgroundTone(props.backgroundTone ?? base.background?.tone ?? fallbackTone);
const backgroundClass = sectionBackgroundClass(backgroundTone);
const backgroundToneAttr = sectionBackgroundToneAttr(backgroundTone);
const backgroundColor = normalizeBackgroundColor(props.backgroundColor ?? base.background?.color);
const backgroundStyle = createBackgroundStyle(backgroundColor);
const defaultGradientColor = '#dbe4f3';
const fadeColor =
  backgroundTone === 'gradient'
    ? backgroundColor ?? defaultGradientColor
    : 'rgb(var(--surface-base-rgb))';
const componentProps = {
  title,
  intro,
  eyebrow: eyebrow ?? undefined,
  members,
  backgroundClass,
  backgroundTone: backgroundToneAttr,
  backgroundStyle,
  ...(Component === AboutTeamCarousel ? { fadeColor } : {}),
};
---
{Component && members.length > 0 ? (
  <Component {...componentProps} />
) : null}
