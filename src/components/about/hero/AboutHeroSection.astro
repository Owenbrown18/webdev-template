---
import {
  site,
  about,
  getAboutHeroVariant,
  getAboutHeroBackgroundTone,
  isAboutHeroAnimationEnabled,
} from '../../../config/content';
import {
  normalizeBackgroundTone,
  normalizeBackgroundColor,
  sectionBackgroundClass,
  sectionBackgroundToneAttr,
  createBackgroundStyle,
} from '../../../utils/background';
import AboutHeroClassic from './AboutHeroClassic.astro';
import AboutHeroShowcase from './AboutHeroShowcase.astro';
import AboutHeroFullscreen from './AboutHeroFullscreen.astro';

const variants: Record<string, any> = {
  classic: AboutHeroClassic,
  showcase: AboutHeroShowcase,
  fullscreen: AboutHeroFullscreen,
};

const variantKey = getAboutHeroVariant();
const Component = variantKey === 'none' ? null : variants[variantKey] ?? variants.classic;
const rawProps = (Astro.props ?? {}) as Record<string, any>;
const overrideTone = rawProps.backgroundTone;
const overrideColor = rawProps.backgroundColor;
const overrideClass = rawProps.backgroundClass;
const restProps = { ...rawProps };
const animationOverride = rawProps.animation as boolean | undefined;
delete restProps.backgroundTone;
delete restProps.backgroundColor;
delete restProps.backgroundClass;
delete restProps.animation;
const fallbackTone = getAboutHeroBackgroundTone();
const normalizedTone = normalizeBackgroundTone(overrideTone ?? fallbackTone);
const backgroundClass = overrideClass ?? sectionBackgroundClass(normalizedTone);
const backgroundToneAttr = sectionBackgroundToneAttr(normalizedTone);
const heroContent = about.hero ?? {};
const backgroundColor = normalizeBackgroundColor(overrideColor ?? heroContent.background?.color);
const backgroundStyle = createBackgroundStyle(backgroundColor, normalizedTone);
const animationEnabled =
  animationOverride !== undefined ? animationOverride : isAboutHeroAnimationEnabled();
const isFullscreenVariant = variantKey === 'fullscreen';
const heroProps = {
  site,
  backgroundClass,
  backgroundTone: backgroundToneAttr,
  backgroundStyle,
  animationEnabled: animationEnabled !== false,
  ...restProps,
};
---
{isFullscreenVariant && Component ? (
  <div class="relative" data-about-hero>
    <Component {...heroProps} />
    <button
      type="button"
      class="fullscreen-hero__scroll-button"
      data-about-hero-scroll
      aria-label="Scroll down"
      data-visible="false"
    >
      <svg viewBox="0 0 20 20" fill="none" aria-hidden="true" class="h-5 w-5">
        <path
          d="M4.5 7.5L10 13l5.5-5.5"
          stroke="currentColor"
          stroke-width="1.8"
          stroke-linecap="round"
          stroke-linejoin="round"
        />
      </svg>
    </button>
  </div>
) : Component ? <Component {...heroProps} /> : null}

{isFullscreenVariant ? (
  <script>
    const init = () => {
      const root = document.querySelector('[data-about-hero]');
      const button = root?.querySelector('[data-about-hero-scroll]');
      if (!(button instanceof HTMLElement)) return;
      button.addEventListener('click', () => {
        const target = document.getElementById('about-scroll-target');
        if (!(target instanceof HTMLElement)) return;
        const rect = target.getBoundingClientRect();
        const offset = rect.top + window.scrollY;
        const adjust = offset - 32;
        window.scrollTo({ top: adjust, behavior: 'smooth' });
      });

      requestAnimationFrame(() => {
        button.dataset.visible = 'true';
      });
    };

    if (document.readyState === 'loading') {
      document.addEventListener('DOMContentLoaded', init, { once: true });
    } else {
      init();
    }
  </script>
) : null}
