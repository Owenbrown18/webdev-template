---
interface Stat {
  label?: string;
  value?: string;
}

interface Item {
  title?: string;
  description?: string;
  icon?: string;
  highlight?: string;
  ctaLabel?: string;
  details?: string | string[];
}

interface Props {
  title: string;
  intro?: string;
  eyebrow?: string;
  supporting?: string;
  stats?: Stat[];
  items: Item[];
  backgroundClass?: string;
  animationEnabled?: boolean;
  backgroundTone?: string;
  backgroundStyle?: string;
}

const {
  title,
  intro,
  eyebrow,
  supporting,
  stats = [],
  items,
  backgroundClass,
  animationEnabled = true,
  backgroundTone,
  backgroundStyle,
}: Props = Astro.props as Props;

const toParagraphs = (value: unknown): string[] => {
  if (Array.isArray(value)) {
    return value
      .map((entry) => (typeof entry === 'string' ? entry.trim() : ''))
      .filter(Boolean);
  }

  if (typeof value === 'string') {
    return value
      .split(/\n{2,}/)
      .map((paragraph) => paragraph.trim())
      .filter(Boolean);
  }

  return [];
};

const formattedItems = items.map((item, index) => {
  const detailParagraphs = toParagraphs((item as { details?: unknown })?.details ?? []);
  const modalId = `community-modal-${index + 1}`;
  return {
    ...item,
    ctaLabel: item.ctaLabel ?? 'See more',
    detailParagraphs,
    hasDetails: detailParagraphs.length > 0,
    modalId,
    modalTitleId: `${modalId}-title`,
  };
});

const sectionClasses = [backgroundClass, 'section-shell'].filter(Boolean).join(' ');
const shouldAnimate = animationEnabled !== false;
const animateAttr = shouldAnimate ? 'true' : 'false';
const statClasses = [
  'surface-card surface-card-static relative h-full overflow-hidden rounded-2xl border border-white/40 bg-white/70 px-6 py-5 text-center backdrop-blur-sm',
  shouldAnimate
    ? 'motion-safe:opacity-0 motion-safe:translate-y-4 motion-safe:transition-all motion-safe:duration-[1000ms] motion-safe:ease-out data-[visible=true]:motion-safe:translate-y-0 data-[visible=true]:motion-safe:opacity-100'
    : '',
]
  .filter(Boolean)
  .join(' ');
const cardClasses = [
  'surface-card surface-card-static relative h-full overflow-hidden rounded-3xl border border-white/35 bg-white/75 p-6 backdrop-blur sm:p-8',
  shouldAnimate
    ? 'motion-safe:opacity-0 motion-safe:translate-y-6 motion-safe:transition-all motion-safe:duration-[1200ms] motion-safe:ease-out data-[visible=true]:motion-safe:translate-y-0 data-[visible=true]:motion-safe:opacity-100'
    : '',
]
  .filter(Boolean)
  .join(' ');
---
<section
  class={sectionClasses}
  data-background-tone={backgroundTone ?? undefined}
  style={backgroundStyle}
  data-community-root
  data-community-animate={animateAttr}
>
  <div class="section-container">
    <div class="section-intro max-w-3xl">
      {eyebrow && <p class="section-eyebrow">{eyebrow}</p>}
      <h2 class="section-heading">{title}</h2>
      {intro && <p class="section-subtitle leading-7 text-slate-700">{intro}</p>}
      {supporting && (
        <p class="mt-6 max-w-2xl text-base leading-7 text-slate-600">
          {supporting}
        </p>
      )}
    </div>
    {stats.length > 0 && (
      <dl class="mt-12 grid gap-5 sm:grid-cols-3">
        {stats.map(({ label, value }, index) => {
          const delayStyle = shouldAnimate ? `transition-delay: ${index * 140}ms;` : undefined;
          return (
            <div
              data-community-stat
              class={statClasses}
              style={delayStyle}
            >
              <dt class="text-xs font-semibold uppercase tracking-[0.22em] text-slate-500">{label}</dt>
              <dd class="mt-3 text-2xl font-semibold text-slate-900">{value}</dd>
            </div>
          );
        })}
      </dl>
    )}
    <div class="mt-12 grid gap-6 sm:grid-cols-2 xl:grid-cols-3">
      {formattedItems.map(({ title, description, icon, highlight, ctaLabel, modalId, detailParagraphs, hasDetails }, index) => {
        const delayStyle = shouldAnimate ? `transition-delay: ${200 + index * 140}ms;` : undefined;
        return (
          <article
            data-community-card
            class={cardClasses}
            style={delayStyle}
          >
            <div class="flex items-start justify-between gap-4">
              <div class="flex h-12 w-12 flex-none items-center justify-center rounded-full bg-brand-primary/10 text-xl font-semibold text-brand-primary">
                {icon ?? 'CI'}
              </div>
              {highlight && (
                <span class="inline-flex rounded-full bg-brand-primary/90 px-3 py-1 text-xs font-semibold uppercase tracking-wide text-white">
                  {highlight}
                </span>
              )}
            </div>
            <div class="mt-6 space-y-4">
              <h3 class="text-lg font-semibold text-slate-900">{title}</h3>
              {description && <p class="text-sm leading-6 text-slate-600">{description}</p>}
              {ctaLabel && hasDetails ? (
                <button
                  type="button"
                  data-community-trigger
                  data-community-target={modalId}
                  aria-controls={modalId}
                  aria-haspopup="dialog"
                  aria-expanded="false"
                  class="community-card__cta inline-flex items-center gap-2 text-sm font-semibold text-brand-primary transition hover:text-brand-primary/80 focus:outline-none focus-visible:ring-2 focus-visible:ring-brand-primary/70 focus-visible:ring-offset-2 focus-visible:ring-offset-white"
                >
                  {ctaLabel}
                  <span aria-hidden="true">→</span>
                </button>
              ) : null}
            </div>
          </article>
        );
      })}
    </div>
  </div>
  <div class="community-modals">
    {formattedItems.map(({ modalId, modalTitleId, title, icon, highlight, detailParagraphs }) => (
      <div
        class="community-modal"
        data-community-modal
        data-community-modal-id={modalId}
        id={modalId}
        role="dialog"
        aria-modal="true"
        aria-hidden="true"
        aria-labelledby={modalTitleId}
        hidden
      >
        <div class="community-modal__overlay" data-community-overlay></div>
        <div
          class="community-modal__content"
          data-community-content
          tabindex="-1"
        >
          <button
            type="button"
            class="community-modal__close"
            data-community-close
            aria-label="Close dialog"
          >
            <span aria-hidden="true">×</span>
          </button>
          <div class="community-modal__header">
            <div class="community-modal__icon">
              {icon ?? 'CI'}
            </div>
            <div>
              {highlight && <p class="community-modal__eyebrow">{highlight}</p>}
              <h3 class="community-modal__title" id={modalTitleId}>{title}</h3>
            </div>
          </div>
          <div class="community-modal__body">
            {detailParagraphs.map((paragraph) => (
              <p>{paragraph}</p>
            ))}
          </div>
        </div>
      </div>
    ))}
  </div>
</section>

<script type="module">
  (() => {
    const roots = Array.from(document.querySelectorAll('[data-community-root]'));
    const supportMatchMedia = typeof window !== 'undefined' && typeof window.matchMedia === 'function';
    const prefersReducedMotion = supportMatchMedia
      ? window.matchMedia('(prefers-reduced-motion: reduce)').matches
      : false;

    const reveal = (el) => {
      if (el instanceof HTMLElement) {
        el.dataset.visible = 'true';
      }
    };

    roots.forEach((root) => {
      if (!(root instanceof HTMLElement)) return;

      const animateEnabled = root.dataset.communityAnimate !== 'false';
      const targets = Array.from(
        root.querySelectorAll('[data-community-card], [data-community-stat]'),
      );

      if (!animateEnabled || prefersReducedMotion || !('IntersectionObserver' in window)) {
        targets.forEach((target) => reveal(target));
        return;
      }

      if (root.dataset.communityAnimated === 'true') return;
      root.dataset.communityAnimated = 'true';

      const observer = new IntersectionObserver(
        (entries, obs) => {
          entries.forEach((entry) => {
            if (entry.isIntersecting) {
              reveal(entry.target);
              obs.unobserve(entry.target);
            }
          });
        },
        {
          rootMargin: '0px 0px -10% 0px',
          threshold: 0.1,
        },
      );

      targets.forEach((target) => observer.observe(target));
    });

    const focusableSelector =
      'a[href], button:not([disabled]), textarea, input, select, details summary, [tabindex]:not([tabindex="-1"])';
    const modalMap = new Map();
    const modals = Array.from(document.querySelectorAll('[data-community-modal]'));

    modals.forEach((modal) => {
      const id = modal.getAttribute('data-community-modal-id');
      if (id) {
        modal.setAttribute('aria-hidden', 'true');
        modalMap.set(id, modal);
      }
    });

    if (modalMap.size === 0) {
      return;
    }

    let activeModal = null;
    let activeTrigger = null;
    let lastFocused = null;

    function getFocusable(modal) {
      return Array.from(modal.querySelectorAll(focusableSelector)).filter(
        (el) =>
          el instanceof HTMLElement &&
          !el.hasAttribute('disabled') &&
          el.getAttribute('aria-hidden') !== 'true' &&
          el.tabIndex !== -1,
      );
    }

    function cleanupBodyScroll() {
      document.body.style.removeProperty('overflow');
    }

    function finishClose(modal) {
      modal.hidden = true;
      modal.dataset.state = '';
      modal.setAttribute('aria-hidden', 'true');
      cleanupBodyScroll();
      document.removeEventListener('keydown', handleKeydown, true);
      if (activeTrigger) {
        activeTrigger.setAttribute('aria-expanded', 'false');
      }
      const returnFocus = lastFocused;
      activeModal = null;
      activeTrigger = null;
      lastFocused = null;
      if (returnFocus instanceof HTMLElement) {
        returnFocus.focus();
      }
    }

    function closeModal(modal) {
      if (modal !== activeModal) return;

      if (!prefersReducedMotion && modal.dataset.state === 'open') {
        modal.dataset.state = 'closing';
        const content = modal.querySelector('[data-community-content]');
        let fallbackTimeout = null;

        function complete() {
          if (fallbackTimeout !== null) {
            window.clearTimeout(fallbackTimeout);
          }
          finishClose(modal);
        }

        if (content instanceof HTMLElement) {
          const onTransitionEnd = (event) => {
            if (event.target !== content) return;
            content.removeEventListener('transitionend', onTransitionEnd);
            complete();
          };

          content.addEventListener('transitionend', onTransitionEnd);
          fallbackTimeout = window.setTimeout(() => {
            content.removeEventListener('transitionend', onTransitionEnd);
            complete();
          }, 360);
        } else {
          finishClose(modal);
        }
      } else {
        finishClose(modal);
      }
    }

    function handleKeydown(event) {
      if (!activeModal) return;

      if (event.key === 'Escape') {
        event.preventDefault();
        closeModal(activeModal);
        return;
      }

      if (event.key === 'Tab') {
        const focusable = getFocusable(activeModal);
        if (focusable.length === 0) {
          event.preventDefault();
          return;
        }

        const currentIndex = focusable.indexOf(document.activeElement);
        let nextIndex = currentIndex;

        if (event.shiftKey) {
          nextIndex = currentIndex <= 0 ? focusable.length - 1 : currentIndex - 1;
        } else {
          nextIndex = currentIndex === focusable.length - 1 ? 0 : currentIndex + 1;
        }

        event.preventDefault();
        const next = focusable[nextIndex];
        if (next) {
          next.focus();
        }
      }
    }

    function openModal(modal, trigger) {
      if (modal === activeModal) return;
      if (activeModal) {
        closeModal(activeModal);
      }

      activeTrigger = trigger;
      activeTrigger.setAttribute('aria-expanded', 'true');
      lastFocused = trigger;
      modal.hidden = false;
      modal.setAttribute('aria-hidden', 'false');
      modal.dataset.state = prefersReducedMotion ? 'open' : 'opening';
      document.body.style.setProperty('overflow', 'hidden');
      activeModal = modal;

      if (!prefersReducedMotion && modal.dataset.state === 'opening') {
        requestAnimationFrame(() => {
          requestAnimationFrame(() => {
            if (modal.dataset.state === 'opening') {
              modal.dataset.state = 'open';
            }
          });
        });
      } else {
        modal.dataset.state = 'open';
      }

      document.addEventListener('keydown', handleKeydown, true);

      const focusable = getFocusable(modal);
      const fallbackTarget = modal.querySelector('[data-community-content]');
      const initialFocus = focusable[0] || fallbackTarget;
      if (initialFocus instanceof HTMLElement) {
        initialFocus.focus();
      }
    }

    const triggers = Array.from(document.querySelectorAll('[data-community-trigger]'));
    triggers.forEach((trigger) => {
      if (!(trigger instanceof HTMLElement)) return;
      const targetId = trigger.getAttribute('data-community-target');
      if (!targetId) return;
      const modal = modalMap.get(targetId);
      if (!modal) return;

      trigger.addEventListener('click', () => openModal(modal, trigger));
    });

    modalMap.forEach((modal) => {
      const overlay = modal.querySelector('[data-community-overlay]');
      const closeButton = modal.querySelector('[data-community-close]');

      if (overlay instanceof HTMLElement) {
        overlay.addEventListener('click', () => closeModal(modal));
      }

      if (closeButton instanceof HTMLElement) {
        closeButton.addEventListener('click', () => closeModal(modal));
      }

      modal.addEventListener('astro:before-remove', () => {
        if (modal === activeModal) {
          closeModal(modal);
        }
      });
    });
  })();
</script>

<style is:global>
  .community-card__cta {
    padding: 0;
  }

  .community-modal {
    position: fixed;
    inset: 0;
    z-index: 70;
    display: flex;
    align-items: center;
    justify-content: center;
    padding: 1.5rem;
  }

  .community-modal[hidden] {
    display: none;
  }

  .community-modal__overlay {
    position: absolute;
    inset: 0;
    background: rgba(15, 23, 42, 0.65);
    opacity: 0;
    transition: opacity 220ms ease;
  }

  .community-modal__content {
    position: relative;
    z-index: 1;
    width: min(36rem, 100%);
    border-radius: 1.5rem;
    background: rgba(248, 250, 252, 0.97);
    border: 1px solid rgba(255, 255, 255, 0.8);
    box-shadow:
      0 40px 80px -60px rgba(15, 23, 42, 0.55),
      0 25px 45px -30px rgba(15, 23, 42, 0.25);
    padding: 2.5rem 2.25rem 2rem;
    opacity: 0;
    transform: translateY(24px) scale(0.98);
    transition:
      opacity 220ms ease,
      transform 240ms ease;
    outline: none;
  }

  .community-modal[data-state='open'] .community-modal__overlay {
    opacity: 1;
  }

  .community-modal[data-state='open'] .community-modal__content {
    opacity: 1;
    transform: translateY(0) scale(1);
  }

  .community-modal[data-state='closing'] .community-modal__overlay {
    opacity: 0;
    transition-duration: 160ms;
  }

  .community-modal[data-state='closing'] .community-modal__content {
    opacity: 0;
    transform: translateY(12px) scale(0.98);
    transition-duration: 160ms;
  }

  @media (prefers-reduced-motion: reduce) {
    .community-modal__overlay,
    .community-modal__content {
      transition: none;
    }
  }

  .community-modal__close {
    position: absolute;
    top: 1rem;
    right: 1rem;
    display: inline-flex;
    height: 2.5rem;
    width: 2.5rem;
    align-items: center;
    justify-content: center;
    border-radius: 999px;
    border: none;
    background: rgba(255, 255, 255, 0.85);
    color: rgba(15, 23, 42, 0.75);
    font-size: 1.5rem;
    font-weight: 600;
    cursor: pointer;
    transition:
      background 160ms ease,
      color 160ms ease,
      transform 160ms ease;
  }

  .community-modal__close:hover,
  .community-modal__close:focus-visible {
    background: rgba(37, 99, 235, 0.15);
    color: rgb(37, 99, 235);
    transform: scale(1.05);
    outline: none;
  }

  .community-modal__header {
    display: flex;
    gap: 1.25rem;
    align-items: flex-start;
    margin-bottom: 1.5rem;
  }

  .community-modal__icon {
    display: inline-flex;
    align-items: center;
    justify-content: center;
    height: 3.25rem;
    width: 3.25rem;
    border-radius: 999px;
    background: rgb(var(--color-primary-rgb) / 0.08);
    color: rgb(var(--color-primary-rgb));
    font-weight: 600;
    font-size: 1.1rem;
  }

  .community-modal__eyebrow {
    font-size: 0.75rem;
    font-weight: 600;
    text-transform: uppercase;
    letter-spacing: 0.22em;
    color: rgba(15, 23, 42, 0.6);
    margin-bottom: 0.35rem;
  }

  .community-modal__title {
    font-size: 1.5rem;
    font-weight: 600;
    color: rgb(15, 23, 42);
    line-height: 1.35;
  }

  .community-modal__body {
    display: grid;
    gap: 1rem;
    color: rgba(15, 23, 42, 0.78);
    font-size: 0.95rem;
    line-height: 1.7;
  }
</style>
