---
interface Milestone {
  year?: string;
  title?: string;
  description?: string;
  image?: string;
}

interface Props {
  title: string;
  intro: string;
  milestones: Milestone[];
}

const { title, intro, milestones } = Astro.props as Props;
---
<section class="relative overflow-hidden rounded-3xl bg-slate-900 px-6 py-16 text-white sm:px-10">
  <div class="absolute inset-0 bg-[linear-gradient(135deg,_rgba(15,23,42,0.95),_rgba(37,99,235,0.35))]" aria-hidden="true"></div>
  <div class="relative mx-auto max-w-5xl">
    <div class="max-w-2xl">
      <h2 class="text-3xl font-semibold tracking-tight sm:text-4xl">{title}</h2>
      <p class="mt-4 text-base leading-7 text-white/70">{intro}</p>
    </div>
    <div class="mt-12 grid gap-6 lg:grid-cols-3">
      {milestones.map(({ year, title, description, image }, index) => (
        <article class="flex h-full flex-col rounded-2xl border border-white/15 bg-white/5 p-6 shadow-sm backdrop-blur transition duration-200 hover:bg-white/95 hover:shadow-md focus-within:shadow-md">
          <span class="text-sm font-semibold uppercase tracking-[0.2em] text-white/60">
            {year ?? `Phase ${index + 1}`}
          </span>
          <h3 class="mt-4 text-lg font-semibold text-white">{title}</h3>
          <p class="mt-3 text-sm leading-6 text-white/70">{description}</p>
          {image && (
            <div class="mt-6 overflow-hidden rounded-xl border border-white/10 bg-white/10">
              <img
                src={image}
                alt=""
                class="h-40 w-full object-cover"
                loading="lazy"
                decoding="async"
              />
            </div>
          )}
        </article>
      ))}
    </div>
  </div>
</section>
