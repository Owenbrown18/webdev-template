---
interface ValueItem {
  title?: string;
  description?: string;
  icon?: string;
}

interface Props {
  title: string;
  intro?: string;
  eyebrow?: string;
  items: ValueItem[];
  backgroundClass?: string;
  animationEnabled?: boolean;
  backgroundTone?: string;
  backgroundStyle?: string;
}

const {
  title,
  intro,
  eyebrow,
  items,
  backgroundClass,
  animationEnabled = true,
  backgroundTone,
  backgroundStyle,
}: Props = Astro.props as Props;

const sectionClasses = [backgroundClass, 'section-shell'].filter(Boolean).join(' ');
const shouldAnimate = animationEnabled !== false;
const cardClasses = [
  'surface-card surface-card-static relative h-full overflow-hidden p-6 text-left sm:p-7',
  shouldAnimate
    ? 'motion-safe:opacity-0 motion-safe:-translate-y-3 motion-safe:transition-all motion-safe:duration-[1400ms] motion-safe:ease-out data-[visible=true]:motion-safe:opacity-100 data-[visible=true]:motion-safe:translate-y-0'
    : '',
]
  .filter(Boolean)
  .join(' ');
---
<section
  class={sectionClasses}
  data-background-tone={backgroundTone ?? undefined}
  style={backgroundStyle}
  data-values-root={shouldAnimate ? '' : undefined}
>
  <div class="section-container max-w-5xl">
    <div class="section-intro mx-auto max-w-5xl">
      {eyebrow && <p class="section-eyebrow">{eyebrow}</p>}
      <h2 class="section-heading">{title}</h2>
      {intro && <p class="section-subtitle leading-7">{intro}</p>}
    </div>
    <div class="mt-12 grid gap-8 mx-auto max-w-xl lg:mx-0 lg:max-w-none lg:grid-cols-3">
      {items.map(({ title, description, icon }, index) => {
        const delayStyle = shouldAnimate ? `transition-delay: ${index * 120}ms;` : undefined;
        return (
          <article
            data-values-card
            class={cardClasses}
            style={delayStyle}
          >
            <span class="values-highlight" aria-hidden="true"></span>
            <div class="flex h-12 w-12 items-center justify-center rounded-full bg-brand-primary/10 text-2xl font-semibold text-brand-primary">
              {icon ? icon : '+'}
            </div>
            <h3 class="mt-6 text-lg font-semibold text-slate-900">{title}</h3>
            <p class="mt-3 text-sm leading-6 text-slate-600">{description}</p>
          </article>
        );
      })}
    </div>
  </div>
  {shouldAnimate ? (
    <script>
      const roots = Array.from(document.querySelectorAll('[data-values-root]'));
      const supportMatchMedia = typeof window !== 'undefined' && typeof window.matchMedia === 'function';
      const prefersReducedMotion = supportMatchMedia
        ? window.matchMedia('(prefers-reduced-motion: reduce)').matches
        : false;
      const reveal = (el: Element | null) => {
        if (el instanceof HTMLElement) {
          el.dataset.visible = 'true';
        }
      };

      roots.forEach((root) => {
        if (!(root instanceof HTMLElement)) {
          return;
        }

        if (root.dataset.valuesAnimated === 'true') {
          return;
        }

        const cards = Array.from(root.querySelectorAll('[data-values-card]'));
        if (cards.length === 0) {
          return;
        }

        root.dataset.valuesAnimated = 'true';

        if (prefersReducedMotion || !('IntersectionObserver' in window)) {
          cards.forEach((card) => reveal(card));
          return;
        }

        const observer = new IntersectionObserver(
          (entries, obs) => {
            entries.forEach((entry) => {
              if (entry.isIntersecting) {
                const element = entry.target;
                reveal(element);
                obs.unobserve(element);
              }
            });
          },
          {
            rootMargin: '0px 0px -10% 0px',
            threshold: 0.1,
          },
        );

        cards.forEach((card) => observer.observe(card));
      });
    </script>
  ) : null}
</section>

<style is:global>
  @keyframes values-highlight-sweep {
    0% {
      transform: translateX(-140%);
      opacity: 0;
    }
    25% {
      opacity: 0.4;
    }
    100% {
      transform: translateX(140%);
      opacity: 0;
    }
  }

  [data-values-card] .values-highlight {
    position: absolute;
    top: -30%;
    bottom: -30%;
    left: -40%;
    width: 40%;
    background: linear-gradient(
      90deg,
      rgba(255, 255, 255, 0),
      rgba(255, 255, 255, 0.45),
      rgba(255, 255, 255, 0)
    );
    opacity: 0;
    transform: translateX(-140%);
    pointer-events: none;
    filter: blur(18px);
  }

  [data-values-card][data-visible="true"] .values-highlight {
    animation: values-highlight-sweep 1.6s ease-out forwards;
  }
</style>
