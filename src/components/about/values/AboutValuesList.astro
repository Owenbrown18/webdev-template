---
interface ValueItem {
  title?: string;
  description?: string;
  icon?: string;
}

interface Props {
  title?: string;
  intro?: string;
  eyebrow?: string;
  supporting?: string;
  items?: ValueItem[];
}

const {
  title = 'Values that guide every project',
  intro = '',
  eyebrow = 'Our values',
  supporting = 'Every promise we make to clients ties back to these principles. They guide hiring, training, and how we show up in your home.',
  items = [],
} = Astro.props as Props;

const values = Array.isArray(items) ? items.filter(Boolean) : [];
---
<section class="section-shell">
  <div class="section-container grid max-w-5xl gap-12 lg:grid-cols-[minmax(0,1fr)_minmax(0,1.1fr)] lg:items-start">
    <div class="space-y-6">
      {eyebrow && <p class="section-eyebrow">{eyebrow}</p>}
      <h2 class="section-heading">{title}</h2>
      {intro && <p class="section-subtitle">{intro}</p>}
      {supporting && <p class="text-sm text-slate-500">{supporting}</p>}
    </div>
    <dl class="relative space-y-6 border-l border-slate-200 pl-10">
      <span class="pointer-events-none absolute inset-y-0 left-[-1px] hidden w-px bg-gradient-to-b from-slate-200 via-transparent to-transparent lg:block" aria-hidden="true"></span>
      {values.map(({ title, description, icon }, index) => (
        <div class="surface-card relative p-6 transition-shadow duration-200 hover:shadow-card-hover">
          <dt class="flex items-center gap-4 text-base font-semibold tracking-tight text-slate-900">
            <span class="relative flex h-11 w-11 flex-shrink-0 items-center justify-center rounded-full bg-brand-primary/10 text-sm font-semibold uppercase tracking-[0.12em] text-brand-primary">
              {icon ? icon : String(index + 1).padStart(2, '0')}
            </span>
            <span>{title}</span>
          </dt>
          <dd class="mt-3 text-sm leading-6 text-slate-600">{description}</dd>
        </div>
      ))}
    </dl>
  </div>
</section>
