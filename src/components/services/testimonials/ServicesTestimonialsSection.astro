---
import type { SiteContent, TestimonialsContent } from '../../../types/content';
import {
  site,
  servicesPage,
  getServicesTestimonialsVariant,
  getServicesTestimonialsBackgroundTone,
  isServicesTestimonialsAnimationEnabled,
} from '../../../config/content';
import {
  normalizeBackgroundTone,
  normalizeBackgroundColor,
  sectionBackgroundClass,
  sectionBackgroundToneAttr,
  createBackgroundStyle,
} from '../../../utils/background';
import TestimonialsGrid from '../../home/testimonials/TestimonialsGrid.astro';
import TestimonialsStack from '../../home/testimonials/TestimonialsStack.astro';

const variants: Record<string, any> = {
  grid: TestimonialsGrid,
  stack: TestimonialsStack,
};

const base = servicesPage.testimonials ?? {};
const props = (Astro.props ?? {}) as Record<string, any>;
const {
  backgroundTone: overrideTone,
  backgroundColor: overrideColor,
  backgroundClass: overrideClass,
  animation: animationOverride,
  variant: variantOverride,
  quotes: quotesOverride,
  eyebrow: eyebrowOverride,
  title: titleOverride,
  intro: introOverride,
  site: siteOverride,
  ...restProps
} = props;

const fallbackTone = getServicesTestimonialsBackgroundTone();
const backgroundTone = normalizeBackgroundTone(overrideTone ?? base.background?.tone ?? fallbackTone);
const backgroundClass = overrideClass ?? sectionBackgroundClass(backgroundTone);
const backgroundToneAttr = sectionBackgroundToneAttr(backgroundTone);
const backgroundColor = normalizeBackgroundColor(overrideColor ?? base.background?.color);
const backgroundStyle = createBackgroundStyle(backgroundColor);
const animationSetting = animationOverride ?? base.animation;
const animationEnabled = animationSetting ?? isServicesTestimonialsAnimationEnabled();

const variantKey = typeof variantOverride === 'string' ? variantOverride : getServicesTestimonialsVariant();
const Component = variantKey === 'none' ? null : variants[variantKey] ?? variants.grid;

const rawQuotes = Array.isArray(quotesOverride) ? quotesOverride : base.items;
const normalizedQuotes = Array.isArray(rawQuotes)
  ? rawQuotes
      .map((entry) => {
        if (!entry || typeof entry !== 'object') {
          return null;
        }
        const quote = typeof entry.quote === 'string' ? entry.quote.trim() : '';
        const author = typeof entry.author === 'string' ? entry.author.trim() : '';
        if (!quote) {
          return null;
        }
        return { quote, author };
      })
      .filter(Boolean)
  : [];

const eyebrow = (eyebrowOverride ?? base.eyebrow) as string | undefined;
const title = (titleOverride ?? base.title) as string | undefined;
const intro = (introOverride ?? base.intro) as string | undefined;
const currentSite = (siteOverride ?? site) as SiteContent;
---
{Component && normalizedQuotes.length > 0 ? (
  <Component
    quotes={normalizedQuotes as TestimonialsContent['items']}
    site={currentSite}
    eyebrow={eyebrow}
    title={title}
    intro={intro}
    backgroundClass={backgroundClass}
    backgroundTone={backgroundToneAttr}
    backgroundStyle={backgroundStyle}
    animationEnabled={animationEnabled !== false}
    {...restProps}
  />
) : null}
