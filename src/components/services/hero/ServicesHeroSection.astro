---
import {
  servicesPage,
  getServicesPageMetadata,
  getServicesHeroVariant,
  getServicesHeroBackgroundTone,
  isServicesHeroAnimationEnabled,
} from '../../../config/content';
import {
  normalizeBackgroundTone,
  normalizeBackgroundColor,
  sectionBackgroundClass,
  sectionBackgroundToneAttr,
  createBackgroundStyle,
} from '../../../utils/background';
import ServicesHeroShowcase from './ServicesHeroShowcase.astro';
import ServicesHeroFullscreen from './ServicesHeroFullscreen.astro';

const hero = servicesPage.hero ?? {};
const metadata = getServicesPageMetadata();
const rawProps = (Astro.props ?? {}) as Record<string, any>;
const variantValue = rawProps.variant;
const variantOverride =
  typeof variantValue === 'string' ? variantValue.trim().toLowerCase() : undefined;
const {
  backgroundTone: overrideTone,
  backgroundColor: overrideColor,
  backgroundClass: overrideClass,
  animation: animationOverride,
  ...restProps
} = rawProps;
delete restProps.variant;
delete restProps.backgroundTone;
delete restProps.backgroundColor;
delete restProps.backgroundClass;
delete restProps.animation;

const variants: Record<string, any> = {
  showcase: ServicesHeroShowcase,
  fullscreen: ServicesHeroFullscreen,
};

const variantKey = variantOverride ?? getServicesHeroVariant();
const fallbackTone = getServicesHeroBackgroundTone();
const normalizedTone = normalizeBackgroundTone(overrideTone ?? hero.background?.tone ?? fallbackTone);
const backgroundClass = overrideClass ?? sectionBackgroundClass(normalizedTone);
const backgroundToneAttr = sectionBackgroundToneAttr(normalizedTone);
const backgroundColor = normalizeBackgroundColor(overrideColor ?? hero.background?.color);
const backgroundStyle = createBackgroundStyle(backgroundColor, normalizedTone);
const animationSetting = animationOverride ?? hero.animation;
const animationEnabled = animationSetting ?? isServicesHeroAnimationEnabled();

const Component = variantKey === 'none' ? null : variants[variantKey] ?? variants.showcase;
const componentProps = {
  hero,
  metadata,
  backgroundClass,
  backgroundTone: backgroundToneAttr,
  backgroundStyle,
  animationEnabled: animationEnabled !== false,
};
---
{Component ? <Component {...componentProps} {...restProps} /> : null}
