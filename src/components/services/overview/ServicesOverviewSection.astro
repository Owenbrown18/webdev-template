---
import {
  servicesPage,
  getServicesOverviewBackgroundTone,
  isServicesOverviewAnimationEnabled,
} from '../../../config/content';
import {
  normalizeBackgroundTone,
  normalizeBackgroundColor,
  sectionBackgroundClass,
  sectionBackgroundToneAttr,
  createBackgroundStyle,
} from '../../../utils/background';

const overview = servicesPage.overview ?? {};
const props = (Astro.props ?? {}) as Record<string, any>;
const {
  backgroundTone: overrideTone,
  backgroundClass: overrideClass,
  backgroundColor: overrideColor,
  animation: animationOverride,
  ...restProps
} = props;

const fallbackTone = getServicesOverviewBackgroundTone();
const backgroundTone = normalizeBackgroundTone(overrideTone ?? overview.background?.tone ?? fallbackTone);
const backgroundClass = overrideClass ?? sectionBackgroundClass(backgroundTone);
const backgroundToneAttr = sectionBackgroundToneAttr(backgroundTone);
const backgroundColor = normalizeBackgroundColor(overrideColor ?? overview.background?.color);
const backgroundStyle = createBackgroundStyle(backgroundColor, backgroundTone);
const animationSetting = animationOverride ?? overview.animation;
const animationEnabled = animationSetting ?? isServicesOverviewAnimationEnabled();

const eyebrow = (restProps.eyebrow ?? overview.eyebrow) as string | undefined;
const title = (restProps.title ?? overview.title) as string | undefined;
const intro = (restProps.intro ?? overview.intro) as string | undefined;
const supporting = (restProps.supporting ?? overview.supporting) as string | undefined;
const hasContent = Boolean(eyebrow || title || intro || supporting);
const shouldAnimate = animationEnabled !== false;
const cardClasses = [
  'section-shell',
  backgroundClass,
]
  .filter(Boolean)
  .join(' ');
const contentClasses = [
  'section-container max-w-5xl space-y-6',
  shouldAnimate
    ? 'motion-safe:translate-y-6 motion-safe:opacity-0 motion-safe:transition-all motion-safe:duration-[900ms] motion-safe:ease-out data-[visible=true]:motion-safe:translate-y-0 data-[visible=true]:motion-safe:opacity-100'
    : '',
]
  .filter(Boolean)
  .join(' ');
---
{hasContent ? (
  <section
    class={cardClasses}
    data-background-tone={backgroundToneAttr ?? undefined}
    style={backgroundStyle}
    data-overview-root={shouldAnimate ? 'true' : undefined}
  >
    <div class={contentClasses} data-overview-content>
      <div class="mx-auto max-w-5xl text-center space-y-6">
        {eyebrow && <p class="section-eyebrow">{eyebrow}</p>}
        {title && <h2 class="section-heading">{title}</h2>}
        {intro && <p class="section-subtitle">{intro}</p>}
        {supporting && <p class="text-base leading-relaxed text-slate-600">{supporting}</p>}
      </div>
    </div>
    {shouldAnimate ? (
      <script>
        const roots = Array.from(document.querySelectorAll('[data-overview-root="true"]'));
        const supportMatchMedia = typeof window !== 'undefined' && typeof window.matchMedia === 'function';
        const prefersReducedMotion = supportMatchMedia
          ? window.matchMedia('(prefers-reduced-motion: reduce)').matches
          : false;

        const reveal = (el) => {
          if (el instanceof HTMLElement) {
            el.dataset.visible = 'true';
          }
        };

        roots.forEach((root) => {
          if (!(root instanceof HTMLElement)) {
            return;
          }

          if (root.dataset.overviewAnimated === 'true') {
            return;
          }

          const content = root.querySelector('[data-overview-content]');
          if (!(content instanceof HTMLElement)) {
            return;
          }

          root.dataset.overviewAnimated = 'true';

          if (prefersReducedMotion || !('IntersectionObserver' in window)) {
            reveal(content);
            return;
          }

          const observer = new IntersectionObserver(
            (entries, obs) => {
              entries.forEach((entry) => {
                if (entry.isIntersecting) {
                  reveal(entry.target);
                  obs.unobserve(entry.target);
                }
              });
            },
            {
              rootMargin: '0px 0px -10% 0px',
              threshold: 0.2,
            },
          );

          observer.observe(content);
        });
      </script>
    ) : null}
  </section>
) : null}
